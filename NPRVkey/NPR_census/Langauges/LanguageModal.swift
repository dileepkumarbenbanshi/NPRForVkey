//
//  ARootClass.swift
//  Model Generated using http://www.jsoncafe.com/
//  Created on July 15, 2021

import Foundation

    
    
class LanguageModal : Decodable {
      var langObj = LanguageModal()
        let aadhaar  = ""
       var currentLanguage  = ""
        let aadhaar_available  = ""
        let aadhaar_not_available  = ""
        let aadhaar_not_enrolled  = ""
        let aadhaar_status  = ""
        let aadhar_detail_alert  = ""
        let about_us  = ""
        let account_is_not_of_enumerator  = ""
        let account_is_not_of_supervisor  = ""
        let action_settings  = ""
        let activated_devic_title  = ""
        let actual  = ""
        let adNewHh  = ""
        let add_member  = ""
        let address  = ""
        let address1  = ""
        let address2  = ""
        let age  = ""
        let age_text  = ""
        let AGREE  = ""
        let alert  = ""
        let alert_date  = ""
        let already_marked_as_complted_and  = ""
        let already_marked_as_complted_and_uninhabited  = ""
        let app_name  = ""
        let are_you_sure  = ""
        let are_you_sure_to_exit  = ""
        let are_you_sure_to_exit_from_hh_form  = ""
    let as_dead  = ""
    let as_migrated  = ""
    let assign_eb_number  = ""
    let available  = ""
    let available_members  = ""
    let birth_address1  = ""
    let birth_address2  = ""
    let birth_address3  = ""
    let birth_district  = ""
    let birth_state  = ""
    let birth_tehsil  = ""
    let block  = ""
    let block_no  = ""
    let both_password_should_be_same  = ""
    let button_add_member  = ""
    let button_no  = ""
    let button_save  = ""
    let button_update  = ""
    let button_yes  = ""
    let cancel  = ""
    let cancel_hit  = ""
    let cancel_lower  = ""
    let census_house_hold_number  = ""
    let census_house_no  = ""
    let census_household_no  = ""
    let census_housing_number  = ""
    let c_hangepassword  = ""
    let check_hh_type  = ""
    let chnage_password_via_otp  = ""
    let choose_any_hh_to_shift_member  = ""
    let choose_any_member_to_mark_as_head  = ""
    let choose_country  = ""
    let choose_district  = ""
    let choose_member  = ""
    let choose_nationality  = ""
    let choose_respondant  = ""
    let choose_respondent  = ""
    let choose_state  = ""
    let choose_tehsil  = ""
    let clear  = ""
    let clear_all_data  = ""
    let click_yes_to_mark_as_head  = ""
    let connected_network_is_slow_try_again  = ""
    let connected_to_internet  = ""
    let connecting_to_server  = ""
    let connection_failed_due_to  = ""
    let contact_to_your_supervisor  = ""
    let contact_us  = ""
    let country  = ""
    let current_address  = ""
    let current_address_district  = ""
    let current_address_state  = ""
    let current_address_tehsil  = ""
    let current_district  = ""
    let current_eb_status  = ""
    let current_house  = ""
    let current_pincode  = ""
    let current_state  = ""
    let current_sub_district  = ""
    let current_village  = ""
    let currently_no_data_for_this_hlb  = ""
    let data_clear_open_app_again  = ""
    let date_of_birth  = ""
    let date_of_birth_format_hint  = ""
    let db_reload  = ""
    let de_enroll_message1  = ""
    let de_enroll_message2  = ""
    let dead  = ""
    let dead_member  = ""
    let declared  = ""
    let delete  = ""
    let developer_by  = ""
    let developer_mode_dialog_message  = ""
    let developer_mode_dialog_title  = ""
    let device_is_de_registered_so_not_allowed_yo_upload  = ""
    let disagree  = ""
    let district  = ""
    let divorced  = ""
    let do_you_want_continue_selected_lang_desc  = ""
    let do_you_want_continue_selected_lang_title  = ""
    let do_you_want_to_change_the_hh  = ""
    let do_you_want_to_continue  = ""
    let do_you_want_to_upload_locked_hh_also1  = ""
    let do_you_want_to_upload_locked_hh_also2  = ""
    let dob  = ""
    let dob_type  = ""
    let downloaded  = ""
    let downloaded_at  = ""
    let downloading_data  = ""
    let downloading_required_data  = ""
    let driving_licence  = ""
    let due_to_family_migrated  = ""

    let due_to_hh_locked  = ""

    let due_to_hh_not_available  = ""

    let due_to_locked  = ""
    let eb_already_downloaded  = ""
    let eb_canot_be_download_try_again  = ""
    let eb_complete_successfully  = ""
    let eb_completion_alert1  = ""
    let eb_completion_alert2  = ""
    let eb_completion_alert2_title  = ""
    let eb_doesnot_completed_try_again  = ""
    let eb_download_successfully  = ""
    let eb_mark_as_completed  = ""
    let eb_not_alloted  = ""
    let eb_number  = ""
    let eb_proceed_comfirmation  = ""
    let eb_removed  = ""
    let eb_update  = ""
    let eb_start_date  = ""
    let ebstartdate_mark  = ""
    let education  = ""
    let education_details  = ""
    let education_qualification : [ModelNameID]
    let eid_available  = ""
    let email_id_not_available  = ""
    let emulator_status  = ""
    let enter_eb_search  = ""
    let enter_member_dob_first  = ""
    let enter_mother_tounge  = ""
    let enter_remarks  = ""
    let enter_reson_to_skip_household  = ""
    let enter_search_aadhaar  = ""
    let enter_search_dob  = ""
    let enter_search_head  = ""
    let enter_search_mobile  = ""
    let enter_search_name  = ""
    let enter_search_value  = ""
    let enum_mark_this_hlb_ui  = ""
    let enumerator_sign  = ""
    let enumerator_signature  = ""
    let error  = ""
    let error401_sync  = ""
    let error_wile_connecting_to_server  = ""
    let error204  = ""
    let error400  = ""
    let error401  = ""
    let expected_hh  = ""
    let expected_hh_can_not_be_blank  = ""
    let expected_hh_can_not_be_less_then_completed_hh  = ""
    let expected_hh_can_not_be_more_than  = ""
    let expected_hh_can_not_be_one  = ""
    let expected_hh_can_not_be_zero  = ""
    let expected_hh_can_not_be_zero_after_eb_upload  = ""
    let expected_hh_message  = ""
    let expected_hh_to_split  = ""
    let f_birth_address  = ""
    let f_birth_address2  = ""
    let f_birth_address3  = ""
    let f_birth_district  = ""
    let f_birth_state  = ""
    let f_birth_village  = ""
    let f_dob  = ""
    let f_name  = ""
    let fail  = ""
    let failed  = ""
    let failed_to_download_file  = ""
    let failed_to_download_file_no_data_found  = ""
    let failed_to_download_file_please_check_internet  = ""
    let failed_to_upload_file  = ""
    let failed_to_upload_file_check_your_internet_connection  = ""
    let family_migrated  = ""
    let faq  = ""
    let father_birth_address  = ""
    let father_birth_address2  = ""
    let father_birth_address3  = ""
    let feild_should_not  = ""
    let female  = ""
    let field_should_not_be_blank  = ""
    let file_upload_successfully  = ""
    let first_hh_no  = ""
    let first_last_name_should_be2_char_length  = ""
    let first_member_sr_no  = ""
    let first_middle_last_name_should_be2_char_length  = ""
    let first_middle_name_should_be2_char_length  = ""
    let first_name  = ""
    let first_name_can_not_be_empty  = ""
    let firstly_update_head_p_address_data  = ""
    let firstly_update_head_present_address_data  = ""
    let forgot_password  = ""
    let gender  = ""
    let got_it  = ""
    let head  = ""
    let head_change  = ""
    let head_delete_message  = ""
    let head_is_not_married  = ""
    let head_married_to_never_married  = ""
    let head_married_to_widowed  = ""
    let head_of_family_first_name  = ""
    let head_of_family_name  = ""
    let hh_done_by_se_ref_no  = ""
    let hh_member_addtion  = ""
    let hh_member_details  = ""
    let hh_member_form  = ""
    let hh_member_updation_form  = ""
    let hh_no  = ""
    let hh_number  = ""
    let hh_number2  = ""
    let hh_skipped  = ""
    let hh_spiliting  = ""
    let hh_split_skip  = ""
    let hh_summary  = ""
    let hh_type  = ""
    let home_screen  = ""
    let house_demolished  = ""
    let household_status  = ""
    let houseless  = ""
    let identification_details  = ""
    let imei_exist  = ""
    let in_habitated_eb_completion  = ""
    let incorrect_se  = ""
    let indian  = ""
    let indian_gov  = ""
    let initializing_please_wait  = ""
    let institutional  = ""
    let intention  = ""
    let intro  = ""
    let intro_desc_screen_one  = ""
    let intro_desc_screen_three  = ""
    let intro_desc_screen_two  = ""
    let intro_title_screen_four  = ""
    let intro_title_screen_one  = ""
    let intro_title_screen_three  = ""
    let intro_title_screen_two  = ""
    let invalid_otp  = ""
    let invalid_selfenurefno  = ""
    let keyboard_settings  = ""
    let language_error  = ""
    let last_name  = ""
    let lat1  = ""
    let loading  = ""
    let loading_data  = ""
    let location_particular  = ""
    let loced_member  = ""
    let locked  = ""
    let locked_house  = ""
    let login  = ""
    let l_ogin  = ""
    let lp_headline  = ""
    let m_birth_address  = ""
    let m_birth_address2  = ""
    let m_birth_address3  = ""
    let m_birth_district  = ""
    let m_birth_village  = ""
    let m_dob  = ""
    let m_name  = ""
    let male  = ""
    let marital_status : [ModelNameID]
    let married  = ""
    let member_added_successfully  = ""
    let member_added_sucess  = ""
    let member_available  = ""
    let member_dead_successfully  = ""
    let member_deleted_sucess_message1  = ""
    let member_deleted_sucess_message2  = ""
    let member_died  = ""
    let member_married_to_widowed  = ""
    let member_migrated  = ""
    let member_migrated_successfully  = ""
    let member_sr_no  = ""
    let member_status  = ""
    let member_updated_successfully  = ""
    let member_with_aadhaar  = ""
    let member_with_dl  = ""
    let member_with_pancard  = ""
    let member_with_passport  = ""
    let member_with_voter_id  = ""
    let members_with_mobile_number  = ""
    let members_yet_to_be_udated  = ""
    let menu_gallery  = ""
    let menu_home  = ""
    let menu_send  = ""
    let menu_share  = ""
    let menu_slideshow  = ""
    let menu_tools  = ""
    let middle_name  = ""
    let migrated_member  = ""
    let migrated_out  = ""
    let mobile  = ""
    let mobile_number_is_not_validated  = ""
    let mother_birth_address  = ""
    let mother_birth_address2  = ""
    let mother_birth_address3  = ""
    let mother_tongue_already_present  = ""
    let mother_tounge : [ModelNameID]
    let na_member  = ""
    let name  = ""
    let name_of_institue  = ""
    let name_of_person  = ""
    let national_population_register  = ""
    let nationality  = ""
    let nationality_declaratation  = ""
    let nav_header_desc  = ""
    let nav_header_subtitle  = ""
    let nav_header_title  = ""
    let navigation_drawer_close  = ""
    let navigation_drawer_open  = ""
    let never_married  = ""
    let new_field  = ""
    let new_hh  = ""
    let new_hh_added  = ""
    let new_member  = ""
    let new_member_added_successfully  = ""
    let new_password  = ""
    let next  = ""
    let no  = ""
    let no_data  = ""
    let no_data_to_upload  = ""
    let no_eb  = ""
    let no_eb_to_choose_for_this_sup  = ""
    let no_imei_or_logintype_passed  = ""
    let no_member_to_make_head  = ""
    let no_of_hh  = ""
    let norecord  = ""
    let normal  = ""
    let not_available  = ""
    let not_connected_to_internet  = ""
    let not_downloaded  = ""
    let not_found  = ""
    let npr_toll_free_number  = ""
    let nprstarted  = ""
    let nua  = ""
    let number_of_member_in_family  = ""
    let occupation : [ModelNameID]
    let ok  = ""
    let o_k  = ""
    let old  = ""
    let one_member_should_be_available_to_died  = ""
    let one_member_should_be_available_to_move  = ""
    let one_member_should_be_available_to_shift  = ""
    let one_member_should_be_available_to_split  = ""
    let other  = ""
    let other_mother_tongue  = ""
    let other_mother_tongue_text  = ""
    let others  = ""
    let otp_send_on  = ""
    let pan_card  = ""
    let parents_age_validation  = ""
    let parents_are_in_hh  = ""
    let parents_details  = ""
    let parents_same_as_previous  = ""
    let parents_validation_age  = ""
    let passport  = ""
    let password  = ""
    let password_changed_message  = ""
    let password_chnaged  = ""
    let password_field_can_not_be_blank  = ""
    let password_same_as_old_error  = ""
    let pending_eb  = ""
    let pending_members  = ""
    let permanent_address  = ""
    let permanent_address_details  = ""
    let permanent_address_same_as_member  = ""
    let permanent_address2  = ""
    let permanent_address3  = ""
    let permanent_address4  = ""
    let permanent_address5  = ""
    let permanent_address6  = ""
    let permanent_address7  = ""
    let personal_details  = ""
    let pincode  = ""
    let place_of_last_residence  = ""
    let place_of_last_residence2  = ""
    let place_of_last_residence3  = ""
    let please_check_your_internet_connection  = ""
    let please_download_eb_to_continue  = ""
    let please_enter_correct_otp  = ""
    let please_login_again  = ""
    let please_tick_the_consent  = ""
    let please_wait  = ""
    let press_ok_to_take_signature  = ""
    let previous_memebr_details_not_complete  = ""
    let privacy_policy  = ""
    let proceed  = ""
    let processing_please_wait  = ""
    let progress  = ""

    let recovery  = ""
    let refresh  = ""
    let refused_answer  = ""
    let registered_user_id  = ""
    let relationship  = ""
    let relationship_to_head : [ModelNameID]
    let relationship_to_head_female : [ModelNameID]
    let relationship_to_head_male : [ModelNameID]
    let relationship_with_head  = ""
    let reload_master_directory  = ""
    let remaning_members  = ""
    let required_resources_downloaded_successfully  = ""
    let resend_otp  = ""
    let resend_otp_success  = ""
    let residential_status  = ""
    let respondant_unable_to_sign_consent  = ""
    let respondent  = ""
    let respondent_details  = ""
    let respondent_mobile  = ""
    let respondent_name  = ""
    let respondent_signature  = ""
    let restart  = ""
    let retry  = ""
    let retry_upload  = ""
    let retype_password  = ""
    let s_birth_district  = ""
    let s_birth_village  = ""
    let s_dob  = ""
    let s_name  = ""
    let same_as_head  = ""
    let same_as_head_present_address  = ""
    let same_as_present_address  = ""
    let same_device_already_activated  = ""
    let save  = ""
    let save_member_data  = ""
    let screen_overlay_dialog_message  = ""
    let screen_overlay_dialog_title  = ""
    let search  = ""
    let search_aadhaar  = ""
    let search_dob  = ""
    let search_edit  = ""
    let search_for_mother_tongue  = ""
    let search_head  = ""
    let search_head_name_from_hlo  = ""
    let search_mobile  = ""
    let search_name  = ""
    let search_heading  = ""
    let seconds_remaining  = ""
    let select_any_member_to_split  = ""
    let select_any_option_to_search  = ""
    let select_any_option_to_skip  = ""
    let select_any_search_type  = ""
    let select_eb  = ""
    let select_father_name  = ""
    let select_head_title  = ""
    let select_hh_for_member_shifting  = ""
    let select_mother_name  = ""
    let select_mother_tounge  = ""
    let select_sup_eb_title  = ""
    let select_ur_language  = ""
    let selected_members_are  = ""
    let selected_members_will_remain_in_hh  = ""
    let selected_memebr_details_not_complete  = ""
    let self_enu_ref_no  = ""
    let selfenurefno_already_exist  = ""
    let seprated  = ""
    let serial_number  = ""
    let server_connection_issue  = ""
    let server_error  = ""
    let sex  = ""
    let shift  = ""
    let sign_by  = ""
    let sign_by_enumerator_on_behalf_of  = ""
    let signature_capture_successful  = ""
    let signature_captured_cancel  = ""
    let signature_captured_successfull  = ""
    let signature_capturing_cancelled  = ""
    let signature_consent  = ""
    let signature_required  = ""
    let signin_sucess  = ""
    let signin_sucess_in_another_device  = ""
    let skip  = ""
    let skip_title  = ""
    let something_went_wrong  = ""
    let split  = ""
    let spliting_completed  = ""
    let sr_no  = ""
    let state  = ""
    let status  = ""
    let sub_district  = ""
    let submit  = ""
    let success  = ""
    let sup_logout  = ""
    let sup_ok  = ""
    let sup_remark  = ""
    let sup_remark_length  = ""
    let sup_sign  = ""
    let sup_signature  = ""
    let sup_view  = ""
    let supervisor_login  = ""
    let supervisor_login_title  = ""
    let switch_eb  = ""
    let sync_hlb  = ""
    let terms_of_use  = ""
    let title_activity_sup_assigned_eb  = ""
    let to_delete  = ""
    let to_delete_hh  = ""
    let to_exit_from_app  = ""
    let to_mark_member  = ""
    let to_shift  = ""
    let to_skip_hh  = ""
    let total_assigned_eb  = ""
    let total_available_households  = ""
    let total_house_hold  = ""
    let total_households  = ""
    let total_households_original_new  = ""
    let total_locked_hh  = ""
    let total_members  = ""
    let total_members_found  = ""
    let total_members_original_new  = ""
    let total_migrated_hh  = ""
    let total_migrated_member  = ""
    let total_new_hh  = ""
    let total_new_member  = ""
    let total_new_member_with_aadhaar  = ""
    let total_new_member_with_dl  = ""
    let total_new_member_with_pancard  = ""
    let total_new_member_with_passport  = ""
    let total_new_member_with_voter_id  = ""
    let total_new_members  = ""
    let total_not_available_hh  = ""
    let total_npr_member  = ""
    let total_old_hh  = ""
    let total_old_member  = ""
    let total_old_member_found  = ""
    let total_original_household  = ""
    let total_original_members  = ""
    let total_pending_households  = ""
    let total_records  = ""
    let total_se_hh  = ""
    let total_updated_households  = ""
    let total_updated_members  = ""
    let total_updated_npr_member  = ""
    let town_village  = ""
    let trans_gender  = ""
    let unauthorized_access  = ""
    let unauthorized_access_while_download_upload_data  = ""
    let upd1  = ""
    let upd2  = ""
    let update_downloaded  = ""
    let upload_data  = ""
    let upload_eb  = ""
    let upload_from_previous_device  = ""
    let uploaded  = ""
    let uploaded_eb  = ""
    let user_does_not_exist  = ""
    let user_doesnot_exist  = ""
    let user_id_password_cant_be_empty  = ""
    let user_not_enrolled_for_mobile_application  = ""
    let userid  = ""
    let validation_aadhaar  = ""
    let validation_age  = ""
    let validation_age_parents  = ""
    let validation_both_password_length  = ""
    let validation_census_house_no  = ""
    let validation_census_house_no_zero  = ""
    let validation_dl  = ""
    let validation_dob_date_future_date  = ""
    let validation_dob_date_future_date_father  = ""
    let validation_dob_date_future_date_mother  = ""
    let validation_dob_date_today_date  = ""
    let validation_dob_date_today_date_father  = ""
    let validation_dob_date_today_date_mother  = ""
    let validation_education  = ""
    let validation_father_birth_country  = ""
    let validation_father_birth_district  = ""
    let validation_father_birth_state  = ""
    let validation_father_dob  = ""
    let validation_father_dob_future_date  = ""
    let validation_father_dob_not_valid  = ""
    let validation_father_dob_today_date  = ""
    let validation_father_dob_with_member_less  = ""
    let validation_father_dob_with_member_same  = ""
    let validation_father_name  = ""
    let validation_first_name  = ""
    let validation_first_name_startwith  = ""
    let validation_gender  = ""
    let validation_hh_family_membr_no  = ""
    let validation_hh_no  = ""
    let validation_hh_no_already_exist  = ""
    let validation_last_name  = ""
    let validation_last_name_startwith  = ""
    let validation_last_residence_country  = ""
    let validation_last_residence_district  = ""
    let validation_last_residence_state  = ""
    let validation_marital_status  = ""
    let validation_member_birthcountry  = ""
    let validation_member_birthdistrict  = ""
    let validation_member_birthstate  = ""
    let validation_member_birthtehsil  = ""
    let validation_member_dob  = ""
    let validation_member_dob_not_valid  = ""
    let validation_member_nationality  = ""
    let validation_middle_name  = ""
    let validation_middle_name_startwith  = ""
    let validation_mobile  = ""
    let validation_mother_birth_country  = ""
    let validation_mother_birth_district  = ""
    let validation_mother_birth_state  = ""
    let validation_mother_dob  = ""
    let validation_mother_dob_not_valid  = ""
    let validation_mother_name  = ""
    let validation_mother_tounge  = ""
    let validation_mother_tounge1  = ""
    let validation_name  = ""
    let validation_name_of_institution  = ""
    let validation_name_of_institution_length  = ""
    let validation_name_special_char  = ""
    let validation_nationality  = ""
    let validation_new_census_household_no  = ""
    let validation_new_census_household_no_zero  = ""
    let validation_newchh_no_already_exist  = ""
    let validation_occupation  = ""
    let validation_pan_card  = ""
    let validation_passport  = ""
    let validation_permaneent_address1  = ""
    let validation_permaneent_address2  = ""
    let validation_permaneent_country  = ""
    let validation_permaneent_district  = ""
    let validation_permaneent_pincode  = ""
    let validation_permaneent_state  = ""
    let validation_permaneent_tehsil  = ""
    let validation_present_address1  = ""
    let validation_present_address2  = ""
    let validation_present_district  = ""
    let validation_present_pincode  = ""
    let validation_present_state  = ""
    let validation_present_sub_district  = ""
    let validation_relationship  = ""
    let validation_respondent_mobile  = ""
    let validation_respondent_name  = ""
    let validation_spouse_name  = ""
    let validation_spouse_name_blank  = ""
    let validation_staying_at_present_address_years  = ""
    let validation_staying_at_present_address_years_can_not_be_more_than_age  = ""
    let validation_staying_at_present_address_years_invalid  = ""
    let validation_staying_at_present_address_years_not  = ""
    let validation_staying_at_present_address_yes_no  = ""
    let validation_voterid  = ""
    let verify_otp  = ""
    let verify_otp_lable  = ""
    let version  = ""
    let view_edit_not_uploaded_message  = ""
    let view_edit_uploaded_list_message  = ""
    let voter_id  = ""
    let ward  = ""
    let wheater_staying_at_present_addres_since_birth  = ""
    let widowed  = ""
    let wrong_login_type  = ""
    let wrong_password  = ""
    let years_of_staying  = ""
    let yes  = ""
    let yes_to_add_more_member  = ""
    let you_have_complted10_hh_please_upload  = ""
    let you_have_complted50_member_please_upload  = ""
    let you_will_loss_data  = ""

}
//        enum CodingKeys: String, CodingKey {
//                case aadhaar = "aadhaar"
//                case aadhaar_available = "aadhaar_available"
//                case aadhaar_not_available = "aadhaar_not_available"
//                case aadhaarNotEnrolled = "aadhaar_not_enrolled"
//                case aadhaarStatus = "aadhaar_status"
//                case aadharDetailAlert = "aadhar_detail_alert"
//                case about_us = "about_us"
//                case account_is_not_of_enumerator = "account_is_not_of_enumerator"
//                case accountIsNotOfSupervisor = "account_is_not_of_supervisor"
//                case actionSettings = "action_settings"
//                case activatedDevicTitle = "activated_devic_title"
//                case actual = "actual"
//                case adNewHh = "ad_new_hh"
//                case addMember = "add_member"
//                case address = "address"
//                case address1 = "address1"
//                case address2 = "address2"
//                case age = "age"
//                case ageText = "age_text"
//                case AGREE = "AGREE"
//                case alert = "alert"
//                case alertDate = "alert_date"
//                case alreadyMarkedAsCompltedAnd = "already_marked_as_complted_and"
//                case already_marked_as_complted_and_uninhabited = "already_marked_as_complted_and_uninhabited"
//                case app_name = "app_name"
//                case are_you_sure = "are_you_sure"
//                case are_you_sure_to_exit = "are_you_sure_to_exit"
//                case are_you_sure_to_exit_from_hhForm = "are_you_sure_to_exit_from_hh_form"
//                case as_dead = "as_dead"
//                case asMigrated = "as_migrated"
//                case assignEbNumber = "assign_eb_number"
//                case available = "available"
//                case availableMembers = "available_members"
//                case birthAddress1 = "birth_address1"
//                case birthAddress2 = "birth_address2"
//                case birthAddress3 = "birth_address3"
//                case birthDistrict = "birth_district"
//                case birthState = "birth_state"
//                case birthTehsil = "birth_tehsil"
//                case block = "block"
//                case blockNo = "block_no"
//                case bothPasswordShouldBeSame = "both_password_should_be_same"
//                case buttonAddMember = "button_add_member"
//                case buttonNo = "button_no"
//                case buttonSave = "button_save"
//                case buttonUpdate = "button_update"
//                case buttonYes = "button_yes"
//                case cancel = "cancel"
//                case cancelHit = "cancel_hit"
//                case cancelLower = "cancel_lower"
//                case censusHouseHoldNumber = "census_house_hold_number"
//                case censusHouseNo = "census_house_no"
//                case censusHouseholdNo = "census_household_no"
//                case censusHousingNumber = "census_housing_number"
//                case cHANGEPASSWORD = "CHANGE_PASSWORD"
//                case checkHhType = "check_hh_type"
//                case chnagePasswordViaOtp = "chnage_password_via_otp"
//                case chooseAnyHhToShiftMember = "choose_any_hh_to_shift_member"
//                case chooseAnyMemberToMarkAsHead = "choose_any_member_to_mark_as_head"
//                case chooseCountry = "choose_country"
//                case chooseDistrict = "choose_district"
//                case chooseMember = "choose_member"
//                case chooseNationality = "choose_Nationality"
//                case chooseRespondant = "choose_respondant"
//                case chooseRespondent = "choose_respondent"
//                case chooseState = "choose_state"
//                case chooseTehsil = "choose_tehsil"
//                case clear = "clear"
//                case clearAllData = "clear_all_data"
//                case clickYesToMarkAsHead = "click_yes_to_mark_as_head"
//                case connectedNetworkIsSlowTryAgain = "connected_network_is_slow_try_again"
//                case connectedToInternet = "connected_to_internet"
//                case connectingToServer = "connecting_to_server"
//                case connectionFailedDueTo = "connection_failed_due_to"
//                case contactToYourSupervisor = "contact_to_your_supervisor"
//                case contactUs = "contact_us"
//                case country = "country"
//                case currentAddress = "current_address"
//                case currentAddressDistrict = "current_address_district"
//                case currentAddressState = "current_address_state"
//                case currentAddressTehsil = "current_address_tehsil"
//                case currentDistrict = "current_district"
//                case currentEbStatus = "current_eb_status"
//                case currentHouse = "current_house"
//                case currentPincode = "current_pincode"
//                case currentState = "current_state"
//                case currentSubDistrict = "current_sub_district"
//                case currentVillage = "current_village"
//                case currentlyNoDataForThisHlb = "currently_no_data_for_this_hlb"
//                case dataClearOpenAppAgain = "data_clear_open_app_again"
//                case dateOfBirth = "date_of_birth"
//                case dateOfBirthFormatHint = "date_of_birth_format_hint"
//                case dbReload = "db_reload"
//                case deEnrollMessage1 = "de_enroll_message1"
//                case deEnrollMessage2 = "de_enroll_message2"
//                case dead = "dead"
//                case deadMember = "dead_member"
//                case declared = "declared"
//                case delete = "delete"
//                case developerBy = "developer_by"
//                case developerModeDialogMessage = "developer_mode_dialog_message"
//                case developerModeDialogTitle = "developer_mode_dialog_title"
//                case deviceIsDeRegisteredSoNotAllowedYoUpload = "device_is_de_registered_so_not_allowed_yo_upload"
//                case dISAGREE = "DISAGREE"
//                case district = "district"
//                case divorced = "divorced"
//                case doYouWantContinueSelectedLangDesc = "do_you_want_continue_selected_lang_desc"
//                case doYouWantContinueSelectedLangTitle = "do_you_want_continue_selected_lang_title"
//                case doYouWantToChangeTheHh = "do_you_want_to_change_the_hh"
//                case doYouWantToContinue = "do_you_want_to_continue"
//                case doYouWantToUploadLockedHhAlso1 = "do_you_want_to_upload_locked_hh_also1"
//                case doYouWantToUploadLockedHhAlso2 = "do_you_want_to_upload_locked_hh_also2"
//                case dob = "dob"
//                case dobType = "dob_type"
//                case downloaded = "downloaded"
//                case downloadedAt = "downloaded_at"
//                case downloadingData = "downloading_data"
//                case downloadingRequiredData = "downloading_required_data"
//                case drivingLicence = "driving_licence"
//                case dueToFamilyMigrated = "due_to_family_migrated"
//
//                case dueToHhLocked = "due_to_hh_locked"
//
//                case dueToHhNotAvailable = "due_to_hh_not_available"
//
//                case dueToLocked = "due_to_locked"
//                case ebAlreadyDownloaded = "eb_already_downloaded"
//                case ebCanotBeDownloadTryAgain = "eb_canot_be_download_try_again"
//                case ebCompleteSuccessfully = "eb_complete_successfully"
//                case ebCompletionAlert1 = "eb_completion_alert1"
//                case ebCompletionAlert2 = "eb_completion_alert2"
//                case ebCompletionAlert2Title = "eb_completion_alert2_title"
//                case ebDoesnotCompletedTryAgain = "eb_doesnot_completed_try_again"
//                case ebDownloadSuccessfully = "eb_download_successfully"
//                case ebMarkAsCompleted = "eb_mark_as_completed"
//                case ebNotAlloted = "eb_not_alloted"
//                case ebNumber = "eb_number"
//                case ebProceedComfirmation = "eb_proceed_comfirmation"
//                case ebRemoved = "eb_removed"
//                case ebUpdate = "eb_update"
//                case ebStartDate = "ebStartDate"
//                case ebstartdateMark = "ebstartdateMark"
//                case education = "education"
//                case educationDetails = "education_details"
//                case educationQualification = "education_qualification"
//                case eidAvailable = "eid_available"
//                case emailIdNotAvailable = "email_id_not_available"
//                case emulatorStatus = "emulator_status"
//                case enterEbSearch = "enter_eb_search"
//                case enterMemberDobFirst = "enter_member_dob_first"
//                case enterMotherTounge = "enter_mother_tounge"
//                case enterRemarks = "enter_remarks"
//                case enterResonToSkipHousehold = "enter_reson_to_skip_household"
//                case enterSearchAadhaar = "enter_search_aadhaar"
//                case enterSearchDob = "enter_search_dob"
//                case enterSearchHead = "enter_search_head"
//                case enterSearchMobile = "enter_search_mobile"
//                case enterSearchName = "enter_search_name"
//                case enterSearchValue = "enter_search_value"
//                case enumMarkThisHlbUi = "enum_mark_this_hlb_ui"
//                case enumeratorSign = "enumerator_sign"
//                case enumeratorSignature = "enumerator_signature"
//                case error = "error"
//                case error401Sync = "error401_sync"
//                case errorWileConnectingToServer = "error_wile_connecting_to_server"
//                case error204 = "error204"
//                case error400 = "error400"
//                case error401 = "error401"
//                case expectedHh = "expected_hh"
//                case expectedHhCanNotBeBlank = "expected_hh_can_not_be_blank"
//                case expectedHhCanNotBeLessThenCompletedHh = "expected_hh_can_not_be_less_then_completed_hh"
//                case expectedHhCanNotBeMoreThan = "expected_hh_can_not_be_more_than"
//                case expectedHhCanNotBeOne = "expected_hh_can_not_be_one"
//                case expectedHhCanNotBeZero = "expected_hh_can_not_be_zero"
//                case expectedHhCanNotBeZeroAfterEbUpload = "expected_hh_can_not_be_zero_after_eb_upload"
//                case expectedHhMessage = "expected_hh_message"
//                case expectedHhToSplit = "expected_hh_to_split"
//                case fBirthAddress = "f_birth_address"
//                case fBirthAddress2 = "f_birth_address2"
//                case fBirthAddress3 = "f_birth_address3"
//                case fBirthDistrict = "f_birth_district"
//                case fBirthState = "f_birth_state"
//                case fBirthVillage = "f_birth_village"
//                case fDob = "f_dob"
//                case fName = "f_name"
//                case fail = "fail"
//                case failed = "failed"
//                case failedToDownloadFile = "failed_to_download_file"
//                case failedToDownloadFileNoDataFound = "failed_to_download_file_no_data_found"
//                case failedToDownloadFilePleaseCheckInternet = "failed_to_download_file_please_check_internet"
//                case failedToUploadFile = "failed_to_upload_file"
//                case failedToUploadFileCheckYourInternetConnection = "failed_to_upload_file_check_your_internet_connection"
//                case familyMigrated = "family_migrated"
//                case faq = "faq"
//                case fatherBirthAddress = "father_birth_address"
//                case fatherBirthAddress2 = "father_birth_address2"
//                case fatherBirthAddress3 = "father_birth_address3"
//                case feildShouldNot = "feild_should_not"
//                case female = "Female"
//                case fieldShouldNotBeBlank = "field_should_not_be_blank"
//                case fileUploadSuccessfully = "file_upload_successfully"
//                case firstHhNo = "first_hh_no"
//                case firstLastNameShouldBe2CharLength = "first_last_name_should_be2_char_length"
//                case firstMemberSrNo = "first_member_sr_no"
//                case firstMiddleLastNameShouldBe2CharLength = "first_middle_last_name_should_be2_char_length"
//                case firstMiddleNameShouldBe2CharLength = "first_middle_name_should_be2_char_length"
//                case firstName = "first_name"
//                case firstNameCanNotBeEmpty = "first_name_can_not_be_empty"
//                case firstlyUpdateHeadPAddressData = "firstly_update_head_p_address_data"
//                case firstlyUpdateHeadPresentAddressData = "firstly_update_head_present_address_data"
//                case forgotPassword = "forgot_password"
//                case gender = "gender"
//                case gotIt = "got_it"
//                case head = "head"
//                case headChange = "head_change"
//                case headDeleteMessage = "head_delete_message"
//                case headIsNotMarried = "head_is_not_married"
//                case headMarriedToNeverMarried = "head_married_to_never_married"
//                case headMarriedToWidowed = "head_married_to_widowed"
//                case headOfFamilyFirstName = "head_of_family_first_name"
//                case headOfFamilyName = "head_of_family_name"
//                case hhDoneBySeRefNo = "hh_done_by_se_ref_no"
//                case hhMemberAddtion = "hh_member_addtion"
//                case hhMemberDetails = "hh_member_details"
//                case hhMemberForm = "hh_member_form"
//                case hhMemberUpdationForm = "hh_member_updation_form"
//                case hhNo = "hh_no"
//                case hhNumber = "hh_number"
//                case hhNumber2 = "hh_number2"
//                case hhSkipped = "hh_skipped"
//                case hhSpiliting = "hh_spiliting"
//                case hhSplitSkip = "hh_split_skip"
//                case hhSummary = "hh_summary"
//                case hhType = "hh_type"
//                case homeScreen = "homeScreen"
//                case houseDemolished = "house_demolished"
//                case householdStatus = "household_status"
//                case houseless = "houseless"
//                case identificationDetails = "identification_details"
//                case imeiExist = "imei_exist"
//                case inHabitatedEbCompletion = "in_habitated_eb_completion"
//                case incorrectSE = "incorrect_SE"
//                case indian = "indian"
//                case indianGov = "indian_gov"
//                case initializingPleaseWait = "initializing_please_wait"
//                case institutional = "institutional"
//                case intention = "intention"
//                case intro = "intro"
//                case introDescScreenOne = "intro_desc_screen_one"
//                case introDescScreenThree = "intro_desc_screen_three"
//                case introDescScreenTwo = "intro_desc_screen_two"
//                case introTitleScreenFour = "intro_title_screen_four"
//                case introTitleScreenOne = "intro_title_screen_one"
//                case introTitleScreenThree = "intro_title_screen_three"
//                case introTitleScreenTwo = "intro_title_screen_two"
//                case invalidOtp = "invalid_otp"
//                case invalidSelfenurefno = "invalid_selfenurefno"
//                case keyboardSettings = "keyboard_settings"
//                case languageError = "language_error"
//                case lastName = "last_name"
//                case lat1 = "lat1"
//                case loading = "loading"
//                case loadingData = "loading_data"
//                case locationParticular = "location_particular"
//                case locedMember = "loced_member"
//                case locked = "locked"
//                case lockedHouse = "locked_house"
//                case login = "login"
//                case lOGIN = "LOGIN"
//                case lpHeadline = "lp_headline"
//                case mBirthAddress = "m_birth_address"
//                case mBirthAddress2 = "m_birth_address2"
//                case mBirthAddress3 = "m_birth_address3"
//                case mBirthDistrict = "m_birth_district"
//                case mBirthVillage = "m_birth_village"
//                case mDob = "m_dob"
//                case mName = "m_name"
//                case male = "Male"
//                case maritalStatus = "marital_status"
//                case married = "married"
//                case memberAddedSuccessfully = "member_added_successfully"
//                case memberAddedSucess = "member_added_sucess"
//                case memberAvailable = "member_available"
//                case memberDeadSuccessfully = "member_dead_successfully"
//                case memberDeletedSucessMessage1 = "member_deleted_sucess_message1"
//                case memberDeletedSucessMessage2 = "member_deleted_sucess_message2"
//                case memberDied = "member_died"
//                case memberMarriedToWidowed = "member_married_to_widowed"
//                case memberMigrated = "member_migrated"
//                case memberMigratedSuccessfully = "member_migrated_successfully"
//                case memberSrNo = "member_sr_no"
//                case memberStatus = "member_status"
//                case memberUpdatedSuccessfully = "member_updated_successfully"
//                case memberWithAadhaar = "member_with_aadhaar"
//                case memberWithDl = "member_with_dl"
//                case memberWithPancard = "member_with_pancard"
//                case memberWithPassport = "member_with_passport"
//                case memberWithVoterID = "member_with_voterID"
//                case membersWithMobileNumber = "members_with_mobile_number"
//                case membersYetToBeUdated = "members_yet_to_be_udated"
//                case menuGallery = "menu_gallery"
//                case menuHome = "menu_home"
//                case menuSend = "menu_send"
//                case menuShare = "menu_share"
//                case menuSlideshow = "menu_slideshow"
//                case menuTools = "menu_tools"
//                case middleName = "middle_name"
//                case migratedMember = "migrated_member"
//                case migratedOut = "migrated_out"
//                case mobile = "mobile"
//                case mobileNumberIsNotValidated = "mobile_number_is_not_validated"
//                case motherBirthAddress = "mother_birth_address"
//                case motherBirthAddress2 = "mother_birth_address2"
//                case motherBirthAddress3 = "mother_birth_address3"
//                case motherTongueAlreadyPresent = "mother_tongue_already_present"
//                case motherTounge = "mother_tounge"
//                case naMember = "na_member"
//                case name = "name"
//                case nameOfInstitue = "name_of_institue"
//                case nameOfPerson = "name_of_person"
//                case nationalPopulationRegister = "national_population_register"
//                case nationality = "nationality"
//                case nationalityDeclaratation = "nationality_declaratation"
//                case navHeaderDesc = "nav_header_desc"
//                case navHeaderSubtitle = "nav_header_subtitle"
//                case navHeaderTitle = "nav_header_title"
//                case navigationDrawerClose = "navigation_drawer_close"
//                case navigationDrawerOpen = "navigation_drawer_open"
//                case neverMarried = "never_married"
//                case newField = "new_"
//                case newHh = "new_hh"
//                case newHhAdded = "new_hh_added"
//                case newMember = "new_member"
//                case newMemberAddedSuccessfully = "new_member_added_successfully"
//                case newPassword = "new_password"
//                case next = "next"
//                case no = "no"
//                case noData = "no_data"
//                case noDataToUpload = "no_data_to_upload"
//                case noEb = "no_eb"
//                case noEbToChooseForThisSup = "no_eb_to_choose_for_this_sup"
//                case noImeiOrLogintypePassed = "no_imei_or_logintype_passed"
//                case noMemberToMakeHead = "no_member_to_make_head"
//                case noOfHh = "no_of_hh"
//                case norecord = "norecord"
//                case normal = "normal"
//                case notAvailable = "not_available"
//                case notConnectedToInternet = "not_connected_to_internet"
//                case notDownloaded = "not_downloaded"
//                case notFound = "not_found"
//                case nprTollFreeNumber = "npr_toll_free_number"
//                case nprstarted = "nprstarted"
//                case nua = "nua"
//                case numberOfMemberInFamily = "number_of_member_in_family"
//                case occupation = "occupation"
//                case ok = "ok"
//                case oK = "OK"
//                case old = "old"
//                case oneMemberShouldBeAvailableToDied = "one_member_should_be_available_to_died"
//                case oneMemberShouldBeAvailableToMove = "one_member_should_be_available_to_move"
//                case oneMemberShouldBeAvailableToShift = "one_member_should_be_available_to_shift"
//                case oneMemberShouldBeAvailableToSplit = "one_member_should_be_available_to_split"
//                case other = "other"
//                case otherMotherTongue = "other_mother_tongue"
//                case otherMotherTongueText = "other_mother_tongue_text"
//                case others = "Others"
//                case otpSendOn = "otp_send_on"
//                case panCard = "pan_card"
//                case parentsAgeValidation = "parents_age_validation"
//                case parentsAreInHh = "parents_are_in_hh"
//                case parentsDetails = "parents_details"
//                case parentsSameAsPrevious = "parents_same_as_previous"
//                case parentsValidationAge = "parents_validation_age"
//                case passport = "passport"
//                case password = "password"
//                case passwordChangedMessage = "password_changed_message"
//                case passwordChnaged = "password_chnaged"
//                case passwordFieldCanNotBeBlank = "password_field_can_not_be_blank"
//                case passwordSameAsOldError = "password_same_as_old_error"
//                case pendingEb = "pending_eb"
//                case pendingMembers = "pending_members"
//                case permanentAddress = "permanent_address"
//                case permanentAddressDetails = "permanent_address_details"
//                case permanentAddressSameAsMember = "permanent_address_same_as_member"
//                case permanentAddress2 = "permanent_address2"
//                case permanentAddress3 = "permanent_address3"
//                case permanentAddress4 = "permanent_address4"
//                case permanentAddress5 = "permanent_address5"
//                case permanentAddress6 = "permanent_address6"
//                case permanentAddress7 = "permanent_address7"
//                case personalDetails = "personal_details"
//                case pincode = "pincode"
//                case placeOfLastResidence = "place_of_last_residence"
//                case placeOfLastResidence2 = "place_of_last_residence2"
//                case placeOfLastResidence3 = "place_of_last_residence3"
//                case pleaseCheckYourInternetConnection = "please_check_your_internet_connection"
//                case pleaseDownloadEbToContinue = "please_download_eb_to_continue"
//                case pleaseEnterCorrectOtp = "please_enter_correct_otp"
//                case pleaseLoginAgain = "please_login_again"
//                case pleaseTickTheConsent = "please_tick_the_consent"
//                case pleaseWait = "please_wait"
//                case pressOkToTakeSignature = "press_ok_to_take_signature"
//                case previousMemebrDetailsNotComplete = "previous_memebr_details_not_complete"
//                case privacyPolicy = "privacy_policy"
//                case proceed = "proceed"
//                case processingPleaseWait = "processing_please_wait"
//                case progress = "progress"
//
//                case recovery = "recovery"
//                case refresh = "refresh"
//                case refusedAnswer = "refused_answer"
//                case registeredUserId = "registered_userId"
//                case relationship = "relationship"
//                case relationshipToHead = "relationship_to_head"
//                case relationshipToHeadFemale = "relationship_to_head_female"
//                case relationshipToHeadMale = "relationship_to_head_male"
//                case relationshipWithHead = "relationship_with_head"
//                case reloadMasterDirectory = "reload_master_directory"
//                case remaningMembers = "remaning_members"
//                case requiredResourcesDownloadedSuccessfully = "required_resources_downloaded_successfully"
//                case resendOtp = "resend_otp"
//                case resendOtpSuccess = "resend_otp_success"
//                case residentialStatus = "residential_status"
//                case respondantUnableToSignConsent = "respondant_unable_to_sign_consent"
//                case respondent = "respondent"
//                case respondentDetails = "respondent_details"
//                case respondentMobile = "respondent_mobile"
//                case respondentName = "respondent_name"
//                case respondentSignature = "respondent_signature"
//                case restart = "restart"
//                case retry = "retry"
//                case retryUpload = "retry_upload"
//                case retypePassword = "retype_password"
//                case sBirthDistrict = "s_birth_district"
//                case sBirthVillage = "s_birth_village"
//                case sDob = "s_dob"
//                case sName = "s_name"
//                case sameAsHead = "same_as_head"
//                case sameAsHeadPresentAddress = "same_as_head_present_address"
//                case sameAsPresentAddress = "same_as_present_address"
//                case sameDeviceAlreadyActivated = "same_device_already_activated"
//                case save = "save"
//                case saveMemberData = "save_member_data"
//                case screenOverlayDialogMessage = "screen_overlay_dialog_message"
//                case screenOverlayDialogTitle = "screen_overlay_dialog_title"
//                case search = "search"
//                case searchAadhaar = "search_aadhaar"
//                case searchDob = "search_dob"
//                case searchEdit = "search_edit"
//                case searchForMotherTongue = "search_for_mother_tongue"
//                case searchHead = "search_head"
//                case searchHeadNameFromHlo = "search_head_name_from_hlo"
//                case searchMobile = "search_mobile"
//                case searchName = "search_name"
//                case searchHeading = "searchHeading"
//                case secondsRemaining = "seconds_remaining"
//                case selectAnyMemberToSplit = "select_any_member_to_split"
//                case selectAnyOptionToSearch = "select_any_option_to_search"
//                case selectAnyOptionToSkip = "select_any_option_to_skip"
//                case selectAnySearchType = "select_any_search_type"
//                case selectEb = "select_eb"
//                case selectFatherName = "select_father_name"
//                case selectHeadTitle = "select_head_title"
//                case selectHhForMemberShifting = "select_hh_for_member_shifting"
//                case selectMotherName = "select_mother_name"
//                case selectMotherTounge = "select_mother_tounge"
//                case selectSupEbTitle = "select_sup_eb_title"
//                case selectUrLanguage = "select_ur_language"
//                case selectedMembersAre = "selected_members_are"
//                case selectedMembersWillRemainInHh = "selected_members_will_remain_in_hh"
//                case selectedMemebrDetailsNotComplete = "selected_memebr_details_not_complete"
//                case selfEnuRefNo = "self_enu_ref_no"
//                case selfenurefnoAlreadyExist = "selfenurefno_already_exist"
//                case seprated = "seprated"
//                case serialNumber = "serial_number"
//                case serverConnectionIssue = "server_connection_issue"
//                case serverError = "server_error"
//                case sex = "sex"
//                case shift = "shift"
//                case signBy = "sign_by"
//                case signByEnumeratorOnBehalfOf = "sign_by_enumerator_on_behalf_of"
//                case signatureCaptureSuccessful = "signature_capture_successful"
//                case signatureCapturedCancel = "signature_captured_cancel"
//                case signatureCapturedSuccessfull = "signature_captured_successfull"
//                case signatureCapturingCancelled = "signature_capturing_cancelled"
//                case signatureConsent = "signature_consent"
//                case signatureRequired = "signature_required"
//                case signinSucess = "signin_sucess"
//                case signinSucessInAnotherDevice = "signin_sucess_in_another_device"
//                case skip = "skip"
//                case skipTitle = "skip_title"
//                case somethingWentWrong = "something_went_wrong"
//                case split = "split"
//                case splitingCompleted = "spliting_completed"
//                case srNo = "sr_no_"
//                case state = "state"
//                case status = "status"
//                case subDistrict = "sub_district"
//                case submit = "submit"
//                case success = "success"
//                case supLogout = "sup_logout"
//                case supOk = "sup_ok"
//                case supRemark = "sup_remark"
//                case supRemarkLength = "sup_remark_length"
//                case supSign = "sup_sign"
//                case supSignature = "sup_signature"
//                case supView = "sup_view"
//                case supervisorLogin = "supervisor_login"
//                case supervisorLoginTitle = "supervisor_login_title"
//                case switchEb = "switch_eb"
//                case syncHlb = "sync_hlb"
//                case termsOfUse = "terms_of_use"
//                case titleActivitySupAssignedEb = "title_activity_sup_assigned_eb"
//                case toDelete = "to_delete"
//                case toDeleteHh = "to_delete_hh"
//                case toExitFromApp = "to_exit_from_app"
//                case toMarkMember = "to_mark_member"
//                case toShift = "to_shift"
//                case toSkipHh = "to_skip_hh"
//                case totalAssignedEb = "total_assigned_eb"
//                case totalAvailableHouseholds = "total_available_households"
//                case totalHouseHold = "total_house_hold"
//                case totalHouseholds = "total_households"
//                case totalHouseholdsOriginalNew = "total_households_original_new"
//                case totalLockedHh = "total_locked_hh"
//                case totalMembers = "total_members"
//                case totalMembersFound = "total_members_found"
//                case totalMembersOriginalNew = "total_members_original_new"
//                case totalMigratedHh = "total_migrated_hh"
//                case totalMigratedMember = "total_migrated_member"
//                case totalNewHh = "total_new_hh"
//                case totalNewMember = "total_new_member"
//                case totalNewMemberWithAadhaar = "total_new_member_with_aadhaar"
//                case totalNewMemberWithDl = "total_new_member_with_dl"
//                case totalNewMemberWithPancard = "total_new_member_with_pancard"
//                case totalNewMemberWithPassport = "total_new_member_with_passport"
//                case totalNewMemberWithVoterID = "total_new_member_with_voterID"
//                case totalNewMembers = "total_new_members"
//                case totalNotAvailableHh = "total_not_available_hh"
//                case totalNprMember = "total_npr_member"
//                case totalOldHh = "total_old_hh"
//                case totalOldMember = "total_old_member"
//                case totalOldMemberFound = "total_old_member_found"
//                case totalOriginalHousehold = "total_original_household"
//                case totalOriginalMembers = "total_original_members"
//                case totalPendingHouseholds = "total_pending_households"
//                case totalRecords = "total_records"
//                case totalSeHh = "total_se_hh"
//                case totalUpdatedHouseholds = "total_updated_households"
//                case totalUpdatedMembers = "total_updated_members"
//                case totalUpdatedNprMember = "total_updated_npr_member"
//                case townVillage = "town_village"
//                case transGender = "trans_gender"
//                case unauthorizedAccess = "unauthorized_access"
//                case unauthorizedAccessWhileDownloadUploadData = "unauthorized_access_while_download_upload_data"
//                case upd1 = "upd1"
//                case upd2 = "upd2"
//                case updateDownloaded = "update_downloaded"
//                case uploadData = "upload_data"
//                case uploadEb = "upload_eb"
//                case uploadFromPreviousDevice = "upload_from_previous_device"
//                case uploaded = "uploaded"
//                case uploadedEb = "uploaded_eb"
//                case userDoesNotExist = "user_does_not_exist"
//                case userDoesnotExist = "user_doesnot_exist"
//                case userIdPasswordCantBeEmpty = "user_id_password_cant_be_empty"
//                case userNotEnrolledForMobileApplication = "user_not_enrolled_for_mobile_application"
//                case userid = "userid"
//                case validationAadhaar = "validation_aadhaar"
//                case validationAge = "validation_age"
//                case validationAgeParents = "validation_age_parents"
//                case validationBothPasswordLength = "validation_both_password_length"
//                case validationCensusHouseNo = "validation_census_house_no"
//                case validationCensusHouseNoZero = "validation_census_house_no_zero"
//                case validationDl = "validation_dl"
//                case validationDobDateFutureDate = "validation_dob_date_future_date"
//                case validationDobDateFutureDateFather = "validation_dob_date_future_date_father"
//                case validationDobDateFutureDateMother = "validation_dob_date_future_date_mother"
//                case validationDobDateTodayDate = "validation_dob_date_today_date"
//                case validationDobDateTodayDateFather = "validation_dob_date_today_date_father"
//                case validationDobDateTodayDateMother = "validation_dob_date_today_date_mother"
//                case validationEducation = "validation_education"
//                case validationFatherBirthCountry = "validation_father_birth_country"
//                case validationFatherBirthDistrict = "validation_father_birth_district"
//                case validationFatherBirthState = "validation_father_birth_state"
//                case validationFatherDob = "validation_father_dob"
//                case validationFatherDobFutureDate = "validation_father_dob_future_date"
//                case validationFatherDobNotValid = "validation_father_dob_not_valid"
//                case validationFatherDobTodayDate = "validation_father_dob_today_date"
//                case validationFatherDobWithMemberLess = "validation_father_dob_with_member_less"
//                case validationFatherDobWithMemberSame = "validation_father_dob_with_member_same"
//                case validationFatherName = "validation_father_name"
//                case validationFirstName = "validation_first_name"
//                case validationFirstNameStartwith = "validation_first_name_startwith"
//                case validationGender = "validation_gender"
//                case validationHhFamilyMembrNo = "validation_hh_family_membr_no"
//                case validationHhNo = "validation_hh_no"
//                case validationHhNoAlreadyExist = "validation_hh_no_already_exist"
//                case validationLastName = "validation_last_name"
//                case validationLastNameStartwith = "validation_last_name_startwith"
//                case validationLastResidenceCountry = "validation_last_residence_country"
//                case validationLastResidenceDistrict = "validation_last_residence_district"
//                case validationLastResidenceState = "validation_last_residence_state"
//                case validationMaritalStatus = "validation_marital_status"
//                case validationMemberBirthcountry = "validation_member_birthcountry"
//                case validationMemberBirthdistrict = "validation_member_birthdistrict"
//                case validationMemberBirthstate = "validation_member_birthstate"
//                case validationMemberBirthtehsil = "validation_member_birthtehsil"
//                case validationMemberDob = "validation_member_dob"
//                case validationMemberDobNotValid = "validation_member_dob_not_valid"
//                case validationMemberNationality = "validation_member_Nationality"
//                case validationMiddleName = "validation_middle_name"
//                case validationMiddleNameStartwith = "validation_middle_name_startwith"
//                case validationMobile = "validation_mobile"
//                case validationMotherBirthCountry = "validation_mother_birth_country"
//                case validationMotherBirthDistrict = "validation_mother_birth_district"
//                case validationMotherBirthState = "validation_mother_birth_state"
//                case validationMotherDob = "validation_mother_dob"
//                case validationMotherDobNotValid = "validation_mother_dob_not_valid"
//                case validationMotherName = "validation_mother_name"
//                case validationMotherTounge = "validation_mother_tounge"
//                case validationMotherTounge1 = "validation_mother_tounge1"
//                case validationName = "validation_name"
//                case validationNameOfInstitution = "validation_name_of_institution"
//                case validationNameOfInstitutionLength = "validation_name_of_institution_length"
//                case validationNameSpecialChar = "validation_name_special_char"
//                case validationNationality = "validation_nationality"
//                case validationNewCensusHouseholdNo = "validation_new_census_household_no"
//                case validationNewCensusHouseholdNoZero = "validation_new_census_household_no_zero"
//                case validationNewchhNoAlreadyExist = "validation_newchh_no_already_exist"
//                case validationOccupation = "validation_occupation"
//                case validationPanCard = "validation_pan_card"
//                case validationPassport = "validation_passport"
//                case validationPermaneentAddress1 = "validation_permaneent_address1"
//                case validationPermaneentAddress2 = "validation_permaneent_address2"
//                case validationPermaneentCountry = "validation_permaneent_country"
//                case validationPermaneentDistrict = "validation_permaneent_district"
//                case validationPermaneentPincode = "validation_permaneent_pincode"
//                case validationPermaneentState = "validation_permaneent_state"
//                case validationPermaneentTehsil = "validation_permaneent_tehsil"
//                case validationPresentAddress1 = "validation_present_address1"
//                case validationPresentAddress2 = "validation_present_address2"
//                case validationPresentDistrict = "validation_present_district"
//                case validationPresentPincode = "validation_present_pincode"
//                case validationPresentState = "validation_present_state"
//                case validationPresentSubDistrict = "validation_present_sub_district"
//                case validationRelationship = "validation_relationship"
//                case validationRespondentMobile = "validation_respondent_mobile"
//                case validationRespondentName = "validation_respondent_name"
//                case validationSpouseName = "validation_spouse_name"
//                case validationSpouseNameBlank = "validation_spouse_name_blank"
//                case validationStayingAtPresentAddressYears = "validation_staying_at_present_address_years"
//                case validationStayingAtPresentAddressYearsCanNotBeMoreThanAge = "validation_staying_at_present_address_years_can_not_be_more_than_age"
//                case validationStayingAtPresentAddressYearsInvalid = "validation_staying_at_present_address_years_invalid"
//                case validationStayingAtPresentAddressYearsNot = "validation_staying_at_present_address_years_not"
//                case validationStayingAtPresentAddressYesNo = "validation_staying_at_present_address_yes_no"
//                case validationVoterid = "validation_voterid"
//                case verifyOtp = "verify_otp"
//                case verifyOtpLable = "verify_otp_lable"
//                case version = "version"
//                case viewEditNotUploadedMessage = "view_edit_not_uploaded_message"
//                case viewEditUploadedListMessage = "view_edit_uploaded_list_message"
//                case voterId = "voter_id"
//                case ward = "ward"
//                case wheaterStayingAtPresentAddresSinceBirth = "wheater_staying_at_present_addres_since_birth"
//                case widowed = "widowed"
//                case wrongLoginType = "wrong_login_type"
//                case wrongPassword = "wrong_password"
//                case yearsOfStaying = "years_of_staying"
//                case yes = "yes"
//                case yesToAddMoreMember = "yes_to_add_more_member"
//                case youHaveComplted10HhPleaseUpload = "you_have_complted10_hh_please_upload"
//                case youHaveComplted50MemberPleaseUpload = "you_have_complted50_member_please_upload"
//                case youWillLossData = "you_will_loss_data"
//        }
    /*
        init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                aadhaar = try values.decodeIfPresent(String.self, forKey: .aadhaar)
                aadhaarAvailable = try values.decodeIfPresent(String.self, forKey: .aadhaarAvailable)
                aadhaarNotAvailable = try values.decodeIfPresent(String.self, forKey: .aadhaarNotAvailable)
                aadhaarNotEnrolled = try values.decodeIfPresent(String.self, forKey: .aadhaarNotEnrolled)
                aadhaarStatus = try values.decodeIfPresent(String.self, forKey: .aadhaarStatus)
                aadharDetailAlert = try values.decodeIfPresent(String.self, forKey: .aadharDetailAlert)
                aboutUs = try values.decodeIfPresent(String.self, forKey: .aboutUs)
                accountIsNotOfEnumerator = try values.decodeIfPresent(String.self, forKey: .accountIsNotOfEnumerator)
                accountIsNotOfSupervisor = try values.decodeIfPresent(String.self, forKey: .accountIsNotOfSupervisor)
                actionSettings = try values.decodeIfPresent(String.self, forKey: .actionSettings)
                activatedDevicTitle = try values.decodeIfPresent(String.self, forKey: .activatedDevicTitle)
                actual = try values.decodeIfPresent(String.self, forKey: .actual)
                adNewHh = try values.decodeIfPresent(String.self, forKey: .adNewHh)
                addMember = try values.decodeIfPresent(String.self, forKey: .addMember)
                address = try values.decodeIfPresent(String.self, forKey: .address)
                address1 = try values.decodeIfPresent(String.self, forKey: .address1)
                address2 = try values.decodeIfPresent(String.self, forKey: .address2)
                age = try values.decodeIfPresent(String.self, forKey: .age)
                ageText = try values.decodeIfPresent(String.self, forKey: .ageText)
                aGREE = try values.decodeIfPresent(String.self, forKey: .aGREE)
                alert = try values.decodeIfPresent(String.self, forKey: .alert)
                alertDate = try values.decodeIfPresent(String.self, forKey: .alertDate)
                alreadyMarkedAsCompltedAnd = try values.decodeIfPresent(String.self, forKey: .alreadyMarkedAsCompltedAnd)
                alreadyMarkedAsCompltedAndUninhabited = try values.decodeIfPresent(String.self, forKey: .alreadyMarkedAsCompltedAndUninhabited)
                appName = try values.decodeIfPresent(String.self, forKey: .appName)
                areYouSure = try values.decodeIfPresent(String.self, forKey: .areYouSure)
                areYouSureToExit = try values.decodeIfPresent(String.self, forKey: .areYouSureToExit)
                areYouSureToExitFromHhForm = try values.decodeIfPresent(String.self, forKey: .areYouSureToExitFromHhForm)
                asDead = try values.decodeIfPresent(String.self, forKey: .asDead)
                asMigrated = try values.decodeIfPresent(String.self, forKey: .asMigrated)
                assignEbNumber = try values.decodeIfPresent(String.self, forKey: .assignEbNumber)
                available = try values.decodeIfPresent(String.self, forKey: .available)
                availableMembers = try values.decodeIfPresent(String.self, forKey: .availableMembers)
                birthAddress1 = try values.decodeIfPresent(String.self, forKey: .birthAddress1)
                birthAddress2 = try values.decodeIfPresent(String.self, forKey: .birthAddress2)
                birthAddress3 = try values.decodeIfPresent(String.self, forKey: .birthAddress3)
                birthDistrict = try values.decodeIfPresent(String.self, forKey: .birthDistrict)
                birthState = try values.decodeIfPresent(String.self, forKey: .birthState)
                birthTehsil = try values.decodeIfPresent(String.self, forKey: .birthTehsil)
                block = try values.decodeIfPresent(String.self, forKey: .block)
                blockNo = try values.decodeIfPresent(String.self, forKey: .blockNo)
                bothPasswordShouldBeSame = try values.decodeIfPresent(String.self, forKey: .bothPasswordShouldBeSame)
                buttonAddMember = try values.decodeIfPresent(String.self, forKey: .buttonAddMember)
                buttonNo = try values.decodeIfPresent(String.self, forKey: .buttonNo)
                buttonSave = try values.decodeIfPresent(String.self, forKey: .buttonSave)
                buttonUpdate = try values.decodeIfPresent(String.self, forKey: .buttonUpdate)
                buttonYes = try values.decodeIfPresent(String.self, forKey: .buttonYes)
                cancel = try values.decodeIfPresent(String.self, forKey: .cancel)
                cancelHit = try values.decodeIfPresent(String.self, forKey: .cancelHit)
                cancelLower = try values.decodeIfPresent(String.self, forKey: .cancelLower)
                censusHouseHoldNumber = try values.decodeIfPresent(String.self, forKey: .censusHouseHoldNumber)
                censusHouseNo = try values.decodeIfPresent(String.self, forKey: .censusHouseNo)
                censusHouseholdNo = try values.decodeIfPresent(String.self, forKey: .censusHouseholdNo)
                censusHousingNumber = try values.decodeIfPresent(String.self, forKey: .censusHousingNumber)
                cHANGEPASSWORD = try values.decodeIfPresent(String.self, forKey: .cHANGEPASSWORD)
                checkHhType = try values.decodeIfPresent(String.self, forKey: .checkHhType)
                chnagePasswordViaOtp = try values.decodeIfPresent(String.self, forKey: .chnagePasswordViaOtp)
                chooseAnyHhToShiftMember = try values.decodeIfPresent(String.self, forKey: .chooseAnyHhToShiftMember)
                chooseAnyMemberToMarkAsHead = try values.decodeIfPresent(String.self, forKey: .chooseAnyMemberToMarkAsHead)
                chooseCountry = try values.decodeIfPresent(String.self, forKey: .chooseCountry)
                chooseDistrict = try values.decodeIfPresent(String.self, forKey: .chooseDistrict)
                chooseMember = try values.decodeIfPresent(String.self, forKey: .chooseMember)
                chooseNationality = try values.decodeIfPresent(String.self, forKey: .chooseNationality)
                chooseRespondant = try values.decodeIfPresent(String.self, forKey: .chooseRespondant)
                chooseRespondent = try values.decodeIfPresent(String.self, forKey: .chooseRespondent)
                chooseState = try values.decodeIfPresent(String.self, forKey: .chooseState)
                chooseTehsil = try values.decodeIfPresent(String.self, forKey: .chooseTehsil)
                clear = try values.decodeIfPresent(String.self, forKey: .clear)
                clearAllData = try values.decodeIfPresent(String.self, forKey: .clearAllData)
                clickYesToMarkAsHead = try values.decodeIfPresent(String.self, forKey: .clickYesToMarkAsHead)
                connectedNetworkIsSlowTryAgain = try values.decodeIfPresent(String.self, forKey: .connectedNetworkIsSlowTryAgain)
                connectedToInternet = try values.decodeIfPresent(String.self, forKey: .connectedToInternet)
                connectingToServer = try values.decodeIfPresent(String.self, forKey: .connectingToServer)
                connectionFailedDueTo = try values.decodeIfPresent(String.self, forKey: .connectionFailedDueTo)
                contactToYourSupervisor = try values.decodeIfPresent(String.self, forKey: .contactToYourSupervisor)
                contactUs = try values.decodeIfPresent(String.self, forKey: .contactUs)
                country = try values.decodeIfPresent(String.self, forKey: .country)
                currentAddress = try values.decodeIfPresent(String.self, forKey: .currentAddress)
                currentAddressDistrict = try values.decodeIfPresent(String.self, forKey: .currentAddressDistrict)
                currentAddressState = try values.decodeIfPresent(String.self, forKey: .currentAddressState)
                currentAddressTehsil = try values.decodeIfPresent(String.self, forKey: .currentAddressTehsil)
                currentDistrict = try values.decodeIfPresent(String.self, forKey: .currentDistrict)
                currentEbStatus = try values.decodeIfPresent(String.self, forKey: .currentEbStatus)
                currentHouse = try values.decodeIfPresent(String.self, forKey: .currentHouse)
                currentPincode = try values.decodeIfPresent(String.self, forKey: .currentPincode)
                currentState = try values.decodeIfPresent(String.self, forKey: .currentState)
                currentSubDistrict = try values.decodeIfPresent(String.self, forKey: .currentSubDistrict)
                currentVillage = try values.decodeIfPresent(String.self, forKey: .currentVillage)
                currentlyNoDataForThisHlb = try values.decodeIfPresent(String.self, forKey: .currentlyNoDataForThisHlb)
                dataClearOpenAppAgain = try values.decodeIfPresent(String.self, forKey: .dataClearOpenAppAgain)
                dateOfBirth = try values.decodeIfPresent(String.self, forKey: .dateOfBirth)
                dateOfBirthFormatHint = try values.decodeIfPresent(String.self, forKey: .dateOfBirthFormatHint)
                dbReload = try values.decodeIfPresent(String.self, forKey: .dbReload)
                deEnrollMessage1 = try values.decodeIfPresent(String.self, forKey: .deEnrollMessage1)
                deEnrollMessage2 = try values.decodeIfPresent(String.self, forKey: .deEnrollMessage2)
                dead = try values.decodeIfPresent(String.self, forKey: .dead)
                deadMember = try values.decodeIfPresent(String.self, forKey: .deadMember)
                declared = try values.decodeIfPresent(String.self, forKey: .declared)
                delete = try values.decodeIfPresent(String.self, forKey: .delete)
                developerBy = try values.decodeIfPresent(String.self, forKey: .developerBy)
                developerModeDialogMessage = try values.decodeIfPresent(String.self, forKey: .developerModeDialogMessage)
                developerModeDialogTitle = try values.decodeIfPresent(String.self, forKey: .developerModeDialogTitle)
                deviceIsDeRegisteredSoNotAllowedYoUpload = try values.decodeIfPresent(String.self, forKey: .deviceIsDeRegisteredSoNotAllowedYoUpload)
                dISAGREE = try values.decodeIfPresent(String.self, forKey: .dISAGREE)
                district = try values.decodeIfPresent(String.self, forKey: .district)
                divorced = try values.decodeIfPresent(String.self, forKey: .divorced)
                doYouWantContinueSelectedLangDesc = try values.decodeIfPresent(String.self, forKey: .doYouWantContinueSelectedLangDesc)
                doYouWantContinueSelectedLangTitle = try values.decodeIfPresent(String.self, forKey: .doYouWantContinueSelectedLangTitle)
                doYouWantToChangeTheHh = try values.decodeIfPresent(String.self, forKey: .doYouWantToChangeTheHh)
                doYouWantToContinue = try values.decodeIfPresent(String.self, forKey: .doYouWantToContinue)
                doYouWantToUploadLockedHhAlso1 = try values.decodeIfPresent(String.self, forKey: .doYouWantToUploadLockedHhAlso1)
                doYouWantToUploadLockedHhAlso2 = try values.decodeIfPresent(String.self, forKey: .doYouWantToUploadLockedHhAlso2)
                dob = try values.decodeIfPresent(String.self, forKey: .dob)
                dobType = try values.decodeIfPresent(String.self, forKey: .dobType)
                downloaded = try values.decodeIfPresent(String.self, forKey: .downloaded)
                downloadedAt = try values.decodeIfPresent(String.self, forKey: .downloadedAt)
                downloadingData = try values.decodeIfPresent(String.self, forKey: .downloadingData)
                downloadingRequiredData = try values.decodeIfPresent(String.self, forKey: .downloadingRequiredData)
                drivingLicence = try values.decodeIfPresent(String.self, forKey: .drivingLicence)
                dueToFamilyMigrated = try values.decodeIfPresent(String.self, forKey: .dueToFamilyMigrated)
                dueToFamilyMigrated = try values.decodeIfPresent(String.self, forKey: .dueToFamilyMigrated)
                dueToHhLocked = try values.decodeIfPresent(String.self, forKey: .dueToHhLocked)
                dueToHhLocked = try values.decodeIfPresent(String.self, forKey: .dueToHhLocked)
                dueToHhNotAvailable = try values.decodeIfPresent(String.self, forKey: .dueToHhNotAvailable)
                dueToHhNotAvailable = try values.decodeIfPresent(String.self, forKey: .dueToHhNotAvailable)
                dueToLocked = try values.decodeIfPresent(String.self, forKey: .dueToLocked)
                ebAlreadyDownloaded = try values.decodeIfPresent(String.self, forKey: .ebAlreadyDownloaded)
                ebCanotBeDownloadTryAgain = try values.decodeIfPresent(String.self, forKey: .ebCanotBeDownloadTryAgain)
                ebCompleteSuccessfully = try values.decodeIfPresent(String.self, forKey: .ebCompleteSuccessfully)
                ebCompletionAlert1 = try values.decodeIfPresent(String.self, forKey: .ebCompletionAlert1)
                ebCompletionAlert2 = try values.decodeIfPresent(String.self, forKey: .ebCompletionAlert2)
                ebCompletionAlert2Title = try values.decodeIfPresent(String.self, forKey: .ebCompletionAlert2Title)
                ebDoesnotCompletedTryAgain = try values.decodeIfPresent(String.self, forKey: .ebDoesnotCompletedTryAgain)
                ebDownloadSuccessfully = try values.decodeIfPresent(String.self, forKey: .ebDownloadSuccessfully)
                ebMarkAsCompleted = try values.decodeIfPresent(String.self, forKey: .ebMarkAsCompleted)
                ebNotAlloted = try values.decodeIfPresent(String.self, forKey: .ebNotAlloted)
                ebNumber = try values.decodeIfPresent(String.self, forKey: .ebNumber)
                ebProceedComfirmation = try values.decodeIfPresent(String.self, forKey: .ebProceedComfirmation)
                ebRemoved = try values.decodeIfPresent(String.self, forKey: .ebRemoved)
                ebUpdate = try values.decodeIfPresent(String.self, forKey: .ebUpdate)
                ebStartDate = try values.decodeIfPresent(String.self, forKey: .ebStartDate)
                ebstartdateMark = try values.decodeIfPresent(String.self, forKey: .ebstartdateMark)
                education = try values.decodeIfPresent(String.self, forKey: .education)
                educationDetails = try values.decodeIfPresent(String.self, forKey: .educationDetails)
                educationQualification = try values.decodeIfPresent([ModelNameID].self, forKey: .educationQualification)
                eidAvailable = try values.decodeIfPresent(String.self, forKey: .eidAvailable)
                emailIdNotAvailable = try values.decodeIfPresent(String.self, forKey: .emailIdNotAvailable)
                emulatorStatus = try values.decodeIfPresent(String.self, forKey: .emulatorStatus)
                enterEbSearch = try values.decodeIfPresent(String.self, forKey: .enterEbSearch)
                enterMemberDobFirst = try values.decodeIfPresent(String.self, forKey: .enterMemberDobFirst)
                enterMotherTounge = try values.decodeIfPresent(String.self, forKey: .enterMotherTounge)
                enterRemarks = try values.decodeIfPresent(String.self, forKey: .enterRemarks)
                enterResonToSkipHousehold = try values.decodeIfPresent(String.self, forKey: .enterResonToSkipHousehold)
                enterSearchAadhaar = try values.decodeIfPresent(String.self, forKey: .enterSearchAadhaar)
                enterSearchDob = try values.decodeIfPresent(String.self, forKey: .enterSearchDob)
                enterSearchHead = try values.decodeIfPresent(String.self, forKey: .enterSearchHead)
                enterSearchMobile = try values.decodeIfPresent(String.self, forKey: .enterSearchMobile)
                enterSearchName = try values.decodeIfPresent(String.self, forKey: .enterSearchName)
                enterSearchValue = try values.decodeIfPresent(String.self, forKey: .enterSearchValue)
                enumMarkThisHlbUi = try values.decodeIfPresent(String.self, forKey: .enumMarkThisHlbUi)
                enumeratorSign = try values.decodeIfPresent(String.self, forKey: .enumeratorSign)
                enumeratorSignature = try values.decodeIfPresent(String.self, forKey: .enumeratorSignature)
                error = try values.decodeIfPresent(String.self, forKey: .error)
                error401Sync = try values.decodeIfPresent(String.self, forKey: .error401Sync)
                errorWileConnectingToServer = try values.decodeIfPresent(String.self, forKey: .errorWileConnectingToServer)
                error204 = try values.decodeIfPresent(String.self, forKey: .error204)
                error400 = try values.decodeIfPresent(String.self, forKey: .error400)
                error401 = try values.decodeIfPresent(String.self, forKey: .error401)
                expectedHh = try values.decodeIfPresent(String.self, forKey: .expectedHh)
                expectedHhCanNotBeBlank = try values.decodeIfPresent(String.self, forKey: .expectedHhCanNotBeBlank)
                expectedHhCanNotBeLessThenCompletedHh = try values.decodeIfPresent(String.self, forKey: .expectedHhCanNotBeLessThenCompletedHh)
                expectedHhCanNotBeMoreThan = try values.decodeIfPresent(String.self, forKey: .expectedHhCanNotBeMoreThan)
                expectedHhCanNotBeOne = try values.decodeIfPresent(String.self, forKey: .expectedHhCanNotBeOne)
                expectedHhCanNotBeZero = try values.decodeIfPresent(String.self, forKey: .expectedHhCanNotBeZero)
                expectedHhCanNotBeZeroAfterEbUpload = try values.decodeIfPresent(String.self, forKey: .expectedHhCanNotBeZeroAfterEbUpload)
                expectedHhMessage = try values.decodeIfPresent(String.self, forKey: .expectedHhMessage)
                expectedHhToSplit = try values.decodeIfPresent(String.self, forKey: .expectedHhToSplit)
                fBirthAddress = try values.decodeIfPresent(String.self, forKey: .fBirthAddress)
                fBirthAddress2 = try values.decodeIfPresent(String.self, forKey: .fBirthAddress2)
                fBirthAddress3 = try values.decodeIfPresent(String.self, forKey: .fBirthAddress3)
                fBirthDistrict = try values.decodeIfPresent(String.self, forKey: .fBirthDistrict)
                fBirthState = try values.decodeIfPresent(String.self, forKey: .fBirthState)
                fBirthVillage = try values.decodeIfPresent(String.self, forKey: .fBirthVillage)
                fDob = try values.decodeIfPresent(String.self, forKey: .fDob)
                fName = try values.decodeIfPresent(String.self, forKey: .fName)
                fail = try values.decodeIfPresent(String.self, forKey: .fail)
                failed = try values.decodeIfPresent(String.self, forKey: .failed)
                failedToDownloadFile = try values.decodeIfPresent(String.self, forKey: .failedToDownloadFile)
                failedToDownloadFileNoDataFound = try values.decodeIfPresent(String.self, forKey: .failedToDownloadFileNoDataFound)
                failedToDownloadFilePleaseCheckInternet = try values.decodeIfPresent(String.self, forKey: .failedToDownloadFilePleaseCheckInternet)
                failedToUploadFile = try values.decodeIfPresent(String.self, forKey: .failedToUploadFile)
                failedToUploadFileCheckYourInternetConnection = try values.decodeIfPresent(String.self, forKey: .failedToUploadFileCheckYourInternetConnection)
                familyMigrated = try values.decodeIfPresent(String.self, forKey: .familyMigrated)
                faq = try values.decodeIfPresent(String.self, forKey: .faq)
                fatherBirthAddress = try values.decodeIfPresent(String.self, forKey: .fatherBirthAddress)
                fatherBirthAddress2 = try values.decodeIfPresent(String.self, forKey: .fatherBirthAddress2)
                fatherBirthAddress3 = try values.decodeIfPresent(String.self, forKey: .fatherBirthAddress3)
                feildShouldNot = try values.decodeIfPresent(String.self, forKey: .feildShouldNot)
                female = try values.decodeIfPresent(String.self, forKey: .female)
                fieldShouldNotBeBlank = try values.decodeIfPresent(String.self, forKey: .fieldShouldNotBeBlank)
                fileUploadSuccessfully = try values.decodeIfPresent(String.self, forKey: .fileUploadSuccessfully)
                firstHhNo = try values.decodeIfPresent(String.self, forKey: .firstHhNo)
                firstLastNameShouldBe2CharLength = try values.decodeIfPresent(String.self, forKey: .firstLastNameShouldBe2CharLength)
                firstMemberSrNo = try values.decodeIfPresent(String.self, forKey: .firstMemberSrNo)
                firstMiddleLastNameShouldBe2CharLength = try values.decodeIfPresent(String.self, forKey: .firstMiddleLastNameShouldBe2CharLength)
                firstMiddleNameShouldBe2CharLength = try values.decodeIfPresent(String.self, forKey: .firstMiddleNameShouldBe2CharLength)
                firstName = try values.decodeIfPresent(String.self, forKey: .firstName)
                firstNameCanNotBeEmpty = try values.decodeIfPresent(String.self, forKey: .firstNameCanNotBeEmpty)
                firstlyUpdateHeadPAddressData = try values.decodeIfPresent(String.self, forKey: .firstlyUpdateHeadPAddressData)
                firstlyUpdateHeadPresentAddressData = try values.decodeIfPresent(String.self, forKey: .firstlyUpdateHeadPresentAddressData)
                forgotPassword = try values.decodeIfPresent(String.self, forKey: .forgotPassword)
                gender = try values.decodeIfPresent(String.self, forKey: .gender)
                gotIt = try values.decodeIfPresent(String.self, forKey: .gotIt)
                head = try values.decodeIfPresent(String.self, forKey: .head)
                headChange = try values.decodeIfPresent(String.self, forKey: .headChange)
                headDeleteMessage = try values.decodeIfPresent(String.self, forKey: .headDeleteMessage)
                headIsNotMarried = try values.decodeIfPresent(String.self, forKey: .headIsNotMarried)
                headMarriedToNeverMarried = try values.decodeIfPresent(String.self, forKey: .headMarriedToNeverMarried)
                headMarriedToWidowed = try values.decodeIfPresent(String.self, forKey: .headMarriedToWidowed)
                headOfFamilyFirstName = try values.decodeIfPresent(String.self, forKey: .headOfFamilyFirstName)
                headOfFamilyName = try values.decodeIfPresent(String.self, forKey: .headOfFamilyName)
                hhDoneBySeRefNo = try values.decodeIfPresent(String.self, forKey: .hhDoneBySeRefNo)
                hhMemberAddtion = try values.decodeIfPresent(String.self, forKey: .hhMemberAddtion)
                hhMemberDetails = try values.decodeIfPresent(String.self, forKey: .hhMemberDetails)
                hhMemberForm = try values.decodeIfPresent(String.self, forKey: .hhMemberForm)
                hhMemberUpdationForm = try values.decodeIfPresent(String.self, forKey: .hhMemberUpdationForm)
                hhNo = try values.decodeIfPresent(String.self, forKey: .hhNo)
                hhNumber = try values.decodeIfPresent(String.self, forKey: .hhNumber)
                hhNumber2 = try values.decodeIfPresent(String.self, forKey: .hhNumber2)
                hhSkipped = try values.decodeIfPresent(String.self, forKey: .hhSkipped)
                hhSpiliting = try values.decodeIfPresent(String.self, forKey: .hhSpiliting)
                hhSplitSkip = try values.decodeIfPresent(String.self, forKey: .hhSplitSkip)
                hhSummary = try values.decodeIfPresent(String.self, forKey: .hhSummary)
                hhType = try values.decodeIfPresent(String.self, forKey: .hhType)
                homeScreen = try values.decodeIfPresent(String.self, forKey: .homeScreen)
                houseDemolished = try values.decodeIfPresent(String.self, forKey: .houseDemolished)
                householdStatus = try values.decodeIfPresent(String.self, forKey: .householdStatus)
                houseless = try values.decodeIfPresent(String.self, forKey: .houseless)
                identificationDetails = try values.decodeIfPresent(String.self, forKey: .identificationDetails)
                imeiExist = try values.decodeIfPresent(String.self, forKey: .imeiExist)
                inHabitatedEbCompletion = try values.decodeIfPresent(String.self, forKey: .inHabitatedEbCompletion)
                incorrectSE = try values.decodeIfPresent(String.self, forKey: .incorrectSE)
                indian = try values.decodeIfPresent(String.self, forKey: .indian)
                indianGov = try values.decodeIfPresent(String.self, forKey: .indianGov)
                initializingPleaseWait = try values.decodeIfPresent(String.self, forKey: .initializingPleaseWait)
                institutional = try values.decodeIfPresent(String.self, forKey: .institutional)
                intention = try values.decodeIfPresent(String.self, forKey: .intention)
                intro = try values.decodeIfPresent(String.self, forKey: .intro)
                introDescScreenOne = try values.decodeIfPresent(String.self, forKey: .introDescScreenOne)
                introDescScreenThree = try values.decodeIfPresent(String.self, forKey: .introDescScreenThree)
                introDescScreenTwo = try values.decodeIfPresent(String.self, forKey: .introDescScreenTwo)
                introTitleScreenFour = try values.decodeIfPresent(String.self, forKey: .introTitleScreenFour)
                introTitleScreenOne = try values.decodeIfPresent(String.self, forKey: .introTitleScreenOne)
                introTitleScreenThree = try values.decodeIfPresent(String.self, forKey: .introTitleScreenThree)
                introTitleScreenTwo = try values.decodeIfPresent(String.self, forKey: .introTitleScreenTwo)
                invalidOtp = try values.decodeIfPresent(String.self, forKey: .invalidOtp)
                invalidSelfenurefno = try values.decodeIfPresent(String.self, forKey: .invalidSelfenurefno)
                keyboardSettings = try values.decodeIfPresent(String.self, forKey: .keyboardSettings)
                languageError = try values.decodeIfPresent(String.self, forKey: .languageError)
                lastName = try values.decodeIfPresent(String.self, forKey: .lastName)
                lat1 = try values.decodeIfPresent(String.self, forKey: .lat1)
                loading = try values.decodeIfPresent(String.self, forKey: .loading)
                loadingData = try values.decodeIfPresent(String.self, forKey: .loadingData)
                locationParticular = try values.decodeIfPresent(String.self, forKey: .locationParticular)
                locedMember = try values.decodeIfPresent(String.self, forKey: .locedMember)
                locked = try values.decodeIfPresent(String.self, forKey: .locked)
                lockedHouse = try values.decodeIfPresent(String.self, forKey: .lockedHouse)
                login = try values.decodeIfPresent(String.self, forKey: .login)
                lOGIN = try values.decodeIfPresent(String.self, forKey: .lOGIN)
                lpHeadline = try values.decodeIfPresent(String.self, forKey: .lpHeadline)
                mBirthAddress = try values.decodeIfPresent(String.self, forKey: .mBirthAddress)
                mBirthAddress2 = try values.decodeIfPresent(String.self, forKey: .mBirthAddress2)
                mBirthAddress3 = try values.decodeIfPresent(String.self, forKey: .mBirthAddress3)
                mBirthDistrict = try values.decodeIfPresent(String.self, forKey: .mBirthDistrict)
                mBirthVillage = try values.decodeIfPresent(String.self, forKey: .mBirthVillage)
                mDob = try values.decodeIfPresent(String.self, forKey: .mDob)
                mName = try values.decodeIfPresent(String.self, forKey: .mName)
                male = try values.decodeIfPresent(String.self, forKey: .male)
                maritalStatus = try values.decodeIfPresent([ModelNameID].self, forKey: .maritalStatus)
                married = try values.decodeIfPresent(String.self, forKey: .married)
                memberAddedSuccessfully = try values.decodeIfPresent(String.self, forKey: .memberAddedSuccessfully)
                memberAddedSucess = try values.decodeIfPresent(String.self, forKey: .memberAddedSucess)
                memberAvailable = try values.decodeIfPresent(String.self, forKey: .memberAvailable)
                memberDeadSuccessfully = try values.decodeIfPresent(String.self, forKey: .memberDeadSuccessfully)
                memberDeletedSucessMessage1 = try values.decodeIfPresent(String.self, forKey: .memberDeletedSucessMessage1)
                memberDeletedSucessMessage2 = try values.decodeIfPresent(String.self, forKey: .memberDeletedSucessMessage2)
                memberDied = try values.decodeIfPresent(String.self, forKey: .memberDied)
                memberMarriedToWidowed = try values.decodeIfPresent(String.self, forKey: .memberMarriedToWidowed)
                memberMigrated = try values.decodeIfPresent(String.self, forKey: .memberMigrated)
                memberMigratedSuccessfully = try values.decodeIfPresent(String.self, forKey: .memberMigratedSuccessfully)
                memberSrNo = try values.decodeIfPresent(String.self, forKey: .memberSrNo)
                memberStatus = try values.decodeIfPresent(String.self, forKey: .memberStatus)
                memberUpdatedSuccessfully = try values.decodeIfPresent(String.self, forKey: .memberUpdatedSuccessfully)
                memberWithAadhaar = try values.decodeIfPresent(String.self, forKey: .memberWithAadhaar)
                memberWithDl = try values.decodeIfPresent(String.self, forKey: .memberWithDl)
                memberWithPancard = try values.decodeIfPresent(String.self, forKey: .memberWithPancard)
                memberWithPassport = try values.decodeIfPresent(String.self, forKey: .memberWithPassport)
                memberWithVoterID = try values.decodeIfPresent(String.self, forKey: .memberWithVoterID)
                membersWithMobileNumber = try values.decodeIfPresent(String.self, forKey: .membersWithMobileNumber)
                membersYetToBeUdated = try values.decodeIfPresent(String.self, forKey: .membersYetToBeUdated)
                menuGallery = try values.decodeIfPresent(String.self, forKey: .menuGallery)
                menuHome = try values.decodeIfPresent(String.self, forKey: .menuHome)
                menuSend = try values.decodeIfPresent(String.self, forKey: .menuSend)
                menuShare = try values.decodeIfPresent(String.self, forKey: .menuShare)
                menuSlideshow = try values.decodeIfPresent(String.self, forKey: .menuSlideshow)
                menuTools = try values.decodeIfPresent(String.self, forKey: .menuTools)
                middleName = try values.decodeIfPresent(String.self, forKey: .middleName)
                migratedMember = try values.decodeIfPresent(String.self, forKey: .migratedMember)
                migratedOut = try values.decodeIfPresent(String.self, forKey: .migratedOut)
                mobile = try values.decodeIfPresent(String.self, forKey: .mobile)
                mobileNumberIsNotValidated = try values.decodeIfPresent(String.self, forKey: .mobileNumberIsNotValidated)
                motherBirthAddress = try values.decodeIfPresent(String.self, forKey: .motherBirthAddress)
                motherBirthAddress2 = try values.decodeIfPresent(String.self, forKey: .motherBirthAddress2)
                motherBirthAddress3 = try values.decodeIfPresent(String.self, forKey: .motherBirthAddress3)
                motherTongueAlreadyPresent = try values.decodeIfPresent(String.self, forKey: .motherTongueAlreadyPresent)
                motherTounge = try values.decodeIfPresent([ModelNameID].self, forKey: .motherTounge)
                naMember = try values.decodeIfPresent(String.self, forKey: .naMember)
                name = try values.decodeIfPresent(String.self, forKey: .name)
                nameOfInstitue = try values.decodeIfPresent(String.self, forKey: .nameOfInstitue)
                nameOfPerson = try values.decodeIfPresent(String.self, forKey: .nameOfPerson)
                nationalPopulationRegister = try values.decodeIfPresent(String.self, forKey: .nationalPopulationRegister)
                nationality = try values.decodeIfPresent(String.self, forKey: .nationality)
                nationalityDeclaratation = try values.decodeIfPresent(String.self, forKey: .nationalityDeclaratation)
                navHeaderDesc = try values.decodeIfPresent(String.self, forKey: .navHeaderDesc)
                navHeaderSubtitle = try values.decodeIfPresent(String.self, forKey: .navHeaderSubtitle)
                navHeaderTitle = try values.decodeIfPresent(String.self, forKey: .navHeaderTitle)
                navigationDrawerClose = try values.decodeIfPresent(String.self, forKey: .navigationDrawerClose)
                navigationDrawerOpen = try values.decodeIfPresent(String.self, forKey: .navigationDrawerOpen)
                neverMarried = try values.decodeIfPresent(String.self, forKey: .neverMarried)
                newField = try values.decodeIfPresent(String.self, forKey: .newField)
                newHh = try values.decodeIfPresent(String.self, forKey: .newHh)
                newHhAdded = try values.decodeIfPresent(String.self, forKey: .newHhAdded)
                newMember = try values.decodeIfPresent(String.self, forKey: .newMember)
                newMemberAddedSuccessfully = try values.decodeIfPresent(String.self, forKey: .newMemberAddedSuccessfully)
                newPassword = try values.decodeIfPresent(String.self, forKey: .newPassword)
                next = try values.decodeIfPresent(String.self, forKey: .next)
                no = try values.decodeIfPresent(String.self, forKey: .no)
                noData = try values.decodeIfPresent(String.self, forKey: .noData)
                noDataToUpload = try values.decodeIfPresent(String.self, forKey: .noDataToUpload)
                noEb = try values.decodeIfPresent(String.self, forKey: .noEb)
                noEbToChooseForThisSup = try values.decodeIfPresent(String.self, forKey: .noEbToChooseForThisSup)
                noImeiOrLogintypePassed = try values.decodeIfPresent(String.self, forKey: .noImeiOrLogintypePassed)
                noMemberToMakeHead = try values.decodeIfPresent(String.self, forKey: .noMemberToMakeHead)
                noOfHh = try values.decodeIfPresent(String.self, forKey: .noOfHh)
                norecord = try values.decodeIfPresent(String.self, forKey: .norecord)
                normal = try values.decodeIfPresent(String.self, forKey: .normal)
                notAvailable = try values.decodeIfPresent(String.self, forKey: .notAvailable)
                notConnectedToInternet = try values.decodeIfPresent(String.self, forKey: .notConnectedToInternet)
                notDownloaded = try values.decodeIfPresent(String.self, forKey: .notDownloaded)
                notFound = try values.decodeIfPresent(String.self, forKey: .notFound)
                nprTollFreeNumber = try values.decodeIfPresent(String.self, forKey: .nprTollFreeNumber)
                nprstarted = try values.decodeIfPresent(String.self, forKey: .nprstarted)
                nua = try values.decodeIfPresent(String.self, forKey: .nua)
                numberOfMemberInFamily = try values.decodeIfPresent(String.self, forKey: .numberOfMemberInFamily)
                occupation = try values.decodeIfPresent([ModelNameID].self, forKey: .occupation)
                ok = try values.decodeIfPresent(String.self, forKey: .ok)
                oK = try values.decodeIfPresent(String.self, forKey: .oK)
                old = try values.decodeIfPresent(String.self, forKey: .old)
                oneMemberShouldBeAvailableToDied = try values.decodeIfPresent(String.self, forKey: .oneMemberShouldBeAvailableToDied)
                oneMemberShouldBeAvailableToMove = try values.decodeIfPresent(String.self, forKey: .oneMemberShouldBeAvailableToMove)
                oneMemberShouldBeAvailableToShift = try values.decodeIfPresent(String.self, forKey: .oneMemberShouldBeAvailableToShift)
                oneMemberShouldBeAvailableToSplit = try values.decodeIfPresent(String.self, forKey: .oneMemberShouldBeAvailableToSplit)
                other = try values.decodeIfPresent(String.self, forKey: .other)
                otherMotherTongue = try values.decodeIfPresent(String.self, forKey: .otherMotherTongue)
                otherMotherTongueText = try values.decodeIfPresent(String.self, forKey: .otherMotherTongueText)
                others = try values.decodeIfPresent(String.self, forKey: .others)
                otpSendOn = try values.decodeIfPresent(String.self, forKey: .otpSendOn)
                panCard = try values.decodeIfPresent(String.self, forKey: .panCard)
                parentsAgeValidation = try values.decodeIfPresent(String.self, forKey: .parentsAgeValidation)
                parentsAreInHh = try values.decodeIfPresent(String.self, forKey: .parentsAreInHh)
                parentsDetails = try values.decodeIfPresent(String.self, forKey: .parentsDetails)
                parentsSameAsPrevious = try values.decodeIfPresent(String.self, forKey: .parentsSameAsPrevious)
                parentsValidationAge = try values.decodeIfPresent(String.self, forKey: .parentsValidationAge)
                passport = try values.decodeIfPresent(String.self, forKey: .passport)
                password = try values.decodeIfPresent(String.self, forKey: .password)
                passwordChangedMessage = try values.decodeIfPresent(String.self, forKey: .passwordChangedMessage)
                passwordChnaged = try values.decodeIfPresent(String.self, forKey: .passwordChnaged)
                passwordFieldCanNotBeBlank = try values.decodeIfPresent(String.self, forKey: .passwordFieldCanNotBeBlank)
                passwordSameAsOldError = try values.decodeIfPresent(String.self, forKey: .passwordSameAsOldError)
                pendingEb = try values.decodeIfPresent(String.self, forKey: .pendingEb)
                pendingMembers = try values.decodeIfPresent(String.self, forKey: .pendingMembers)
                permanentAddress = try values.decodeIfPresent(String.self, forKey: .permanentAddress)
                permanentAddressDetails = try values.decodeIfPresent(String.self, forKey: .permanentAddressDetails)
                permanentAddressSameAsMember = try values.decodeIfPresent(String.self, forKey: .permanentAddressSameAsMember)
                permanentAddress2 = try values.decodeIfPresent(String.self, forKey: .permanentAddress2)
                permanentAddress3 = try values.decodeIfPresent(String.self, forKey: .permanentAddress3)
                permanentAddress4 = try values.decodeIfPresent(String.self, forKey: .permanentAddress4)
                permanentAddress5 = try values.decodeIfPresent(String.self, forKey: .permanentAddress5)
                permanentAddress6 = try values.decodeIfPresent(String.self, forKey: .permanentAddress6)
                permanentAddress7 = try values.decodeIfPresent(String.self, forKey: .permanentAddress7)
                personalDetails = try values.decodeIfPresent(String.self, forKey: .personalDetails)
                pincode = try values.decodeIfPresent(String.self, forKey: .pincode)
                placeOfLastResidence = try values.decodeIfPresent(String.self, forKey: .placeOfLastResidence)
                placeOfLastResidence2 = try values.decodeIfPresent(String.self, forKey: .placeOfLastResidence2)
                placeOfLastResidence3 = try values.decodeIfPresent(String.self, forKey: .placeOfLastResidence3)
                pleaseCheckYourInternetConnection = try values.decodeIfPresent(String.self, forKey: .pleaseCheckYourInternetConnection)
                pleaseDownloadEbToContinue = try values.decodeIfPresent(String.self, forKey: .pleaseDownloadEbToContinue)
                pleaseEnterCorrectOtp = try values.decodeIfPresent(String.self, forKey: .pleaseEnterCorrectOtp)
                pleaseLoginAgain = try values.decodeIfPresent(String.self, forKey: .pleaseLoginAgain)
                pleaseTickTheConsent = try values.decodeIfPresent(String.self, forKey: .pleaseTickTheConsent)
                pleaseWait = try values.decodeIfPresent(String.self, forKey: .pleaseWait)
                pressOkToTakeSignature = try values.decodeIfPresent(String.self, forKey: .pressOkToTakeSignature)
                previousMemebrDetailsNotComplete = try values.decodeIfPresent(String.self, forKey: .previousMemebrDetailsNotComplete)
                privacyPolicy = try values.decodeIfPresent(String.self, forKey: .privacyPolicy)
                proceed = try values.decodeIfPresent(String.self, forKey: .proceed)
                processingPleaseWait = try values.decodeIfPresent(String.self, forKey: .processingPleaseWait)
                progress = try values.decodeIfPresent(String.self, forKey: .progress)
                progress = try values.decodeIfPresent(String.self, forKey: .progress)
                recovery = try values.decodeIfPresent(String.self, forKey: .recovery)
                refresh = try values.decodeIfPresent(String.self, forKey: .refresh)
                refusedAnswer = try values.decodeIfPresent(String.self, forKey: .refusedAnswer)
                registeredUserId = try values.decodeIfPresent(String.self, forKey: .registeredUserId)
                relationship = try values.decodeIfPresent(String.self, forKey: .relationship)
                relationshipToHead = try values.decodeIfPresent([ModelNameID].self, forKey: .relationshipToHead)
                relationshipToHeadFemale = try values.decodeIfPresent([ModelNameID].self, forKey: .relationshipToHeadFemale)
                relationshipToHeadMale = try values.decodeIfPresent([ModelNameID].self, forKey: .relationshipToHeadMale)
                relationshipWithHead = try values.decodeIfPresent(String.self, forKey: .relationshipWithHead)
                reloadMasterDirectory = try values.decodeIfPresent(String.self, forKey: .reloadMasterDirectory)
                remaningMembers = try values.decodeIfPresent(String.self, forKey: .remaningMembers)
                requiredResourcesDownloadedSuccessfully = try values.decodeIfPresent(String.self, forKey: .requiredResourcesDownloadedSuccessfully)
                resendOtp = try values.decodeIfPresent(String.self, forKey: .resendOtp)
                resendOtpSuccess = try values.decodeIfPresent(String.self, forKey: .resendOtpSuccess)
                residentialStatus = try values.decodeIfPresent(String.self, forKey: .residentialStatus)
                respondantUnableToSignConsent = try values.decodeIfPresent(String.self, forKey: .respondantUnableToSignConsent)
                respondent = try values.decodeIfPresent(String.self, forKey: .respondent)
                respondentDetails = try values.decodeIfPresent(String.self, forKey: .respondentDetails)
                respondentMobile = try values.decodeIfPresent(String.self, forKey: .respondentMobile)
                respondentName = try values.decodeIfPresent(String.self, forKey: .respondentName)
                respondentSignature = try values.decodeIfPresent(String.self, forKey: .respondentSignature)
                restart = try values.decodeIfPresent(String.self, forKey: .restart)
                retry = try values.decodeIfPresent(String.self, forKey: .retry)
                retryUpload = try values.decodeIfPresent(String.self, forKey: .retryUpload)
                retypePassword = try values.decodeIfPresent(String.self, forKey: .retypePassword)
                sBirthDistrict = try values.decodeIfPresent(String.self, forKey: .sBirthDistrict)
                sBirthVillage = try values.decodeIfPresent(String.self, forKey: .sBirthVillage)
                sDob = try values.decodeIfPresent(String.self, forKey: .sDob)
                sName = try values.decodeIfPresent(String.self, forKey: .sName)
                sameAsHead = try values.decodeIfPresent(String.self, forKey: .sameAsHead)
                sameAsHeadPresentAddress = try values.decodeIfPresent(String.self, forKey: .sameAsHeadPresentAddress)
                sameAsPresentAddress = try values.decodeIfPresent(String.self, forKey: .sameAsPresentAddress)
                sameDeviceAlreadyActivated = try values.decodeIfPresent(String.self, forKey: .sameDeviceAlreadyActivated)
                save = try values.decodeIfPresent(String.self, forKey: .save)
                saveMemberData = try values.decodeIfPresent(String.self, forKey: .saveMemberData)
                screenOverlayDialogMessage = try values.decodeIfPresent(String.self, forKey: .screenOverlayDialogMessage)
                screenOverlayDialogTitle = try values.decodeIfPresent(String.self, forKey: .screenOverlayDialogTitle)
                search = try values.decodeIfPresent(String.self, forKey: .search)
                searchAadhaar = try values.decodeIfPresent(String.self, forKey: .searchAadhaar)
                searchDob = try values.decodeIfPresent(String.self, forKey: .searchDob)
                searchEdit = try values.decodeIfPresent(String.self, forKey: .searchEdit)
                searchForMotherTongue = try values.decodeIfPresent(String.self, forKey: .searchForMotherTongue)
                searchHead = try values.decodeIfPresent(String.self, forKey: .searchHead)
                searchHeadNameFromHlo = try values.decodeIfPresent(String.self, forKey: .searchHeadNameFromHlo)
                searchMobile = try values.decodeIfPresent(String.self, forKey: .searchMobile)
                searchName = try values.decodeIfPresent(String.self, forKey: .searchName)
                searchHeading = try values.decodeIfPresent(String.self, forKey: .searchHeading)
                secondsRemaining = try values.decodeIfPresent(String.self, forKey: .secondsRemaining)
                selectAnyMemberToSplit = try values.decodeIfPresent(String.self, forKey: .selectAnyMemberToSplit)
                selectAnyOptionToSearch = try values.decodeIfPresent(String.self, forKey: .selectAnyOptionToSearch)
                selectAnyOptionToSkip = try values.decodeIfPresent(String.self, forKey: .selectAnyOptionToSkip)
                selectAnySearchType = try values.decodeIfPresent(String.self, forKey: .selectAnySearchType)
                selectEb = try values.decodeIfPresent(String.self, forKey: .selectEb)
                selectFatherName = try values.decodeIfPresent(String.self, forKey: .selectFatherName)
                selectHeadTitle = try values.decodeIfPresent(String.self, forKey: .selectHeadTitle)
                selectHhForMemberShifting = try values.decodeIfPresent(String.self, forKey: .selectHhForMemberShifting)
                selectMotherName = try values.decodeIfPresent(String.self, forKey: .selectMotherName)
                selectMotherTounge = try values.decodeIfPresent(String.self, forKey: .selectMotherTounge)
                selectSupEbTitle = try values.decodeIfPresent(String.self, forKey: .selectSupEbTitle)
                selectUrLanguage = try values.decodeIfPresent(String.self, forKey: .selectUrLanguage)
                selectedMembersAre = try values.decodeIfPresent(String.self, forKey: .selectedMembersAre)
                selectedMembersWillRemainInHh = try values.decodeIfPresent(String.self, forKey: .selectedMembersWillRemainInHh)
                selectedMemebrDetailsNotComplete = try values.decodeIfPresent(String.self, forKey: .selectedMemebrDetailsNotComplete)
                selfEnuRefNo = try values.decodeIfPresent(String.self, forKey: .selfEnuRefNo)
                selfenurefnoAlreadyExist = try values.decodeIfPresent(String.self, forKey: .selfenurefnoAlreadyExist)
                seprated = try values.decodeIfPresent(String.self, forKey: .seprated)
                serialNumber = try values.decodeIfPresent(String.self, forKey: .serialNumber)
                serverConnectionIssue = try values.decodeIfPresent(String.self, forKey: .serverConnectionIssue)
                serverError = try values.decodeIfPresent(String.self, forKey: .serverError)
                sex = try values.decodeIfPresent(String.self, forKey: .sex)
                shift = try values.decodeIfPresent(String.self, forKey: .shift)
                signBy = try values.decodeIfPresent(String.self, forKey: .signBy)
                signByEnumeratorOnBehalfOf = try values.decodeIfPresent(String.self, forKey: .signByEnumeratorOnBehalfOf)
                signatureCaptureSuccessful = try values.decodeIfPresent(String.self, forKey: .signatureCaptureSuccessful)
                signatureCapturedCancel = try values.decodeIfPresent(String.self, forKey: .signatureCapturedCancel)
                signatureCapturedSuccessfull = try values.decodeIfPresent(String.self, forKey: .signatureCapturedSuccessfull)
                signatureCapturingCancelled = try values.decodeIfPresent(String.self, forKey: .signatureCapturingCancelled)
                signatureConsent = try values.decodeIfPresent(String.self, forKey: .signatureConsent)
                signatureRequired = try values.decodeIfPresent(String.self, forKey: .signatureRequired)
                signinSucess = try values.decodeIfPresent(String.self, forKey: .signinSucess)
                signinSucessInAnotherDevice = try values.decodeIfPresent(String.self, forKey: .signinSucessInAnotherDevice)
                skip = try values.decodeIfPresent(String.self, forKey: .skip)
                skipTitle = try values.decodeIfPresent(String.self, forKey: .skipTitle)
                somethingWentWrong = try values.decodeIfPresent(String.self, forKey: .somethingWentWrong)
                split = try values.decodeIfPresent(String.self, forKey: .split)
                splitingCompleted = try values.decodeIfPresent(String.self, forKey: .splitingCompleted)
                srNo = try values.decodeIfPresent(String.self, forKey: .srNo)
                state = try values.decodeIfPresent(String.self, forKey: .state)
                status = try values.decodeIfPresent(String.self, forKey: .status)
                subDistrict = try values.decodeIfPresent(String.self, forKey: .subDistrict)
                submit = try values.decodeIfPresent(String.self, forKey: .submit)
                success = try values.decodeIfPresent(String.self, forKey: .success)
                supLogout = try values.decodeIfPresent(String.self, forKey: .supLogout)
                supOk = try values.decodeIfPresent(String.self, forKey: .supOk)
                supRemark = try values.decodeIfPresent(String.self, forKey: .supRemark)
                supRemarkLength = try values.decodeIfPresent(String.self, forKey: .supRemarkLength)
                supSign = try values.decodeIfPresent(String.self, forKey: .supSign)
                supSignature = try values.decodeIfPresent(String.self, forKey: .supSignature)
                supView = try values.decodeIfPresent(String.self, forKey: .supView)
                supervisorLogin = try values.decodeIfPresent(String.self, forKey: .supervisorLogin)
                supervisorLoginTitle = try values.decodeIfPresent(String.self, forKey: .supervisorLoginTitle)
                switchEb = try values.decodeIfPresent(String.self, forKey: .switchEb)
                syncHlb = try values.decodeIfPresent(String.self, forKey: .syncHlb)
                termsOfUse = try values.decodeIfPresent(String.self, forKey: .termsOfUse)
                titleActivitySupAssignedEb = try values.decodeIfPresent(String.self, forKey: .titleActivitySupAssignedEb)
                toDelete = try values.decodeIfPresent(String.self, forKey: .toDelete)
                toDeleteHh = try values.decodeIfPresent(String.self, forKey: .toDeleteHh)
                toExitFromApp = try values.decodeIfPresent(String.self, forKey: .toExitFromApp)
                toMarkMember = try values.decodeIfPresent(String.self, forKey: .toMarkMember)
                toShift = try values.decodeIfPresent(String.self, forKey: .toShift)
                toSkipHh = try values.decodeIfPresent(String.self, forKey: .toSkipHh)
                totalAssignedEb = try values.decodeIfPresent(String.self, forKey: .totalAssignedEb)
                totalAvailableHouseholds = try values.decodeIfPresent(String.self, forKey: .totalAvailableHouseholds)
                totalHouseHold = try values.decodeIfPresent(String.self, forKey: .totalHouseHold)
                totalHouseholds = try values.decodeIfPresent(String.self, forKey: .totalHouseholds)
                totalHouseholdsOriginalNew = try values.decodeIfPresent(String.self, forKey: .totalHouseholdsOriginalNew)
                totalLockedHh = try values.decodeIfPresent(String.self, forKey: .totalLockedHh)
                totalMembers = try values.decodeIfPresent(String.self, forKey: .totalMembers)
                totalMembersFound = try values.decodeIfPresent(String.self, forKey: .totalMembersFound)
                totalMembersOriginalNew = try values.decodeIfPresent(String.self, forKey: .totalMembersOriginalNew)
                totalMigratedHh = try values.decodeIfPresent(String.self, forKey: .totalMigratedHh)
                totalMigratedMember = try values.decodeIfPresent(String.self, forKey: .totalMigratedMember)
                totalNewHh = try values.decodeIfPresent(String.self, forKey: .totalNewHh)
                totalNewMember = try values.decodeIfPresent(String.self, forKey: .totalNewMember)
                totalNewMemberWithAadhaar = try values.decodeIfPresent(String.self, forKey: .totalNewMemberWithAadhaar)
                totalNewMemberWithDl = try values.decodeIfPresent(String.self, forKey: .totalNewMemberWithDl)
                totalNewMemberWithPancard = try values.decodeIfPresent(String.self, forKey: .totalNewMemberWithPancard)
                totalNewMemberWithPassport = try values.decodeIfPresent(String.self, forKey: .totalNewMemberWithPassport)
                totalNewMemberWithVoterID = try values.decodeIfPresent(String.self, forKey: .totalNewMemberWithVoterID)
                totalNewMembers = try values.decodeIfPresent(String.self, forKey: .totalNewMembers)
                totalNotAvailableHh = try values.decodeIfPresent(String.self, forKey: .totalNotAvailableHh)
                totalNprMember = try values.decodeIfPresent(String.self, forKey: .totalNprMember)
                totalOldHh = try values.decodeIfPresent(String.self, forKey: .totalOldHh)
                totalOldMember = try values.decodeIfPresent(String.self, forKey: .totalOldMember)
                totalOldMemberFound = try values.decodeIfPresent(String.self, forKey: .totalOldMemberFound)
                totalOriginalHousehold = try values.decodeIfPresent(String.self, forKey: .totalOriginalHousehold)
                totalOriginalMembers = try values.decodeIfPresent(String.self, forKey: .totalOriginalMembers)
                totalPendingHouseholds = try values.decodeIfPresent(String.self, forKey: .totalPendingHouseholds)
                totalRecords = try values.decodeIfPresent(String.self, forKey: .totalRecords)
                totalSeHh = try values.decodeIfPresent(String.self, forKey: .totalSeHh)
                totalUpdatedHouseholds = try values.decodeIfPresent(String.self, forKey: .totalUpdatedHouseholds)
                totalUpdatedMembers = try values.decodeIfPresent(String.self, forKey: .totalUpdatedMembers)
                totalUpdatedNprMember = try values.decodeIfPresent(String.self, forKey: .totalUpdatedNprMember)
                townVillage = try values.decodeIfPresent(String.self, forKey: .townVillage)
                transGender = try values.decodeIfPresent(String.self, forKey: .transGender)
                unauthorizedAccess = try values.decodeIfPresent(String.self, forKey: .unauthorizedAccess)
                unauthorizedAccessWhileDownloadUploadData = try values.decodeIfPresent(String.self, forKey: .unauthorizedAccessWhileDownloadUploadData)
                upd1 = try values.decodeIfPresent(String.self, forKey: .upd1)
                upd2 = try values.decodeIfPresent(String.self, forKey: .upd2)
                updateDownloaded = try values.decodeIfPresent(String.self, forKey: .updateDownloaded)
                uploadData = try values.decodeIfPresent(String.self, forKey: .uploadData)
                uploadEb = try values.decodeIfPresent(String.self, forKey: .uploadEb)
                uploadFromPreviousDevice = try values.decodeIfPresent(String.self, forKey: .uploadFromPreviousDevice)
                uploaded = try values.decodeIfPresent(String.self, forKey: .uploaded)
                uploadedEb = try values.decodeIfPresent(String.self, forKey: .uploadedEb)
                userDoesNotExist = try values.decodeIfPresent(String.self, forKey: .userDoesNotExist)
                userDoesnotExist = try values.decodeIfPresent(String.self, forKey: .userDoesnotExist)
                userIdPasswordCantBeEmpty = try values.decodeIfPresent(String.self, forKey: .userIdPasswordCantBeEmpty)
                userNotEnrolledForMobileApplication = try values.decodeIfPresent(String.self, forKey: .userNotEnrolledForMobileApplication)
                userid = try values.decodeIfPresent(String.self, forKey: .userid)
                validationAadhaar = try values.decodeIfPresent(String.self, forKey: .validationAadhaar)
                validationAge = try values.decodeIfPresent(String.self, forKey: .validationAge)
                validationAgeParents = try values.decodeIfPresent(String.self, forKey: .validationAgeParents)
                validationBothPasswordLength = try values.decodeIfPresent(String.self, forKey: .validationBothPasswordLength)
                validationCensusHouseNo = try values.decodeIfPresent(String.self, forKey: .validationCensusHouseNo)
                validationCensusHouseNoZero = try values.decodeIfPresent(String.self, forKey: .validationCensusHouseNoZero)
                validationDl = try values.decodeIfPresent(String.self, forKey: .validationDl)
                validationDobDateFutureDate = try values.decodeIfPresent(String.self, forKey: .validationDobDateFutureDate)
                validationDobDateFutureDateFather = try values.decodeIfPresent(String.self, forKey: .validationDobDateFutureDateFather)
                validationDobDateFutureDateMother = try values.decodeIfPresent(String.self, forKey: .validationDobDateFutureDateMother)
                validationDobDateTodayDate = try values.decodeIfPresent(String.self, forKey: .validationDobDateTodayDate)
                validationDobDateTodayDateFather = try values.decodeIfPresent(String.self, forKey: .validationDobDateTodayDateFather)
                validationDobDateTodayDateMother = try values.decodeIfPresent(String.self, forKey: .validationDobDateTodayDateMother)
                validationEducation = try values.decodeIfPresent(String.self, forKey: .validationEducation)
                validationFatherBirthCountry = try values.decodeIfPresent(String.self, forKey: .validationFatherBirthCountry)
                validationFatherBirthDistrict = try values.decodeIfPresent(String.self, forKey: .validationFatherBirthDistrict)
                validationFatherBirthState = try values.decodeIfPresent(String.self, forKey: .validationFatherBirthState)
                validationFatherDob = try values.decodeIfPresent(String.self, forKey: .validationFatherDob)
                validationFatherDobFutureDate = try values.decodeIfPresent(String.self, forKey: .validationFatherDobFutureDate)
                validationFatherDobNotValid = try values.decodeIfPresent(String.self, forKey: .validationFatherDobNotValid)
                validationFatherDobTodayDate = try values.decodeIfPresent(String.self, forKey: .validationFatherDobTodayDate)
                validationFatherDobWithMemberLess = try values.decodeIfPresent(String.self, forKey: .validationFatherDobWithMemberLess)
                validationFatherDobWithMemberSame = try values.decodeIfPresent(String.self, forKey: .validationFatherDobWithMemberSame)
                validationFatherName = try values.decodeIfPresent(String.self, forKey: .validationFatherName)
                validationFirstName = try values.decodeIfPresent(String.self, forKey: .validationFirstName)
                validationFirstNameStartwith = try values.decodeIfPresent(String.self, forKey: .validationFirstNameStartwith)
                validationGender = try values.decodeIfPresent(String.self, forKey: .validationGender)
                validationHhFamilyMembrNo = try values.decodeIfPresent(String.self, forKey: .validationHhFamilyMembrNo)
                validationHhNo = try values.decodeIfPresent(String.self, forKey: .validationHhNo)
                validationHhNoAlreadyExist = try values.decodeIfPresent(String.self, forKey: .validationHhNoAlreadyExist)
                validationLastName = try values.decodeIfPresent(String.self, forKey: .validationLastName)
                validationLastNameStartwith = try values.decodeIfPresent(String.self, forKey: .validationLastNameStartwith)
                validationLastResidenceCountry = try values.decodeIfPresent(String.self, forKey: .validationLastResidenceCountry)
                validationLastResidenceDistrict = try values.decodeIfPresent(String.self, forKey: .validationLastResidenceDistrict)
                validationLastResidenceState = try values.decodeIfPresent(String.self, forKey: .validationLastResidenceState)
                validationMaritalStatus = try values.decodeIfPresent(String.self, forKey: .validationMaritalStatus)
                validationMemberBirthcountry = try values.decodeIfPresent(String.self, forKey: .validationMemberBirthcountry)
                validationMemberBirthdistrict = try values.decodeIfPresent(String.self, forKey: .validationMemberBirthdistrict)
                validationMemberBirthstate = try values.decodeIfPresent(String.self, forKey: .validationMemberBirthstate)
                validationMemberBirthtehsil = try values.decodeIfPresent(String.self, forKey: .validationMemberBirthtehsil)
                validationMemberDob = try values.decodeIfPresent(String.self, forKey: .validationMemberDob)
                validationMemberDobNotValid = try values.decodeIfPresent(String.self, forKey: .validationMemberDobNotValid)
                validationMemberNationality = try values.decodeIfPresent(String.self, forKey: .validationMemberNationality)
                validationMiddleName = try values.decodeIfPresent(String.self, forKey: .validationMiddleName)
                validationMiddleNameStartwith = try values.decodeIfPresent(String.self, forKey: .validationMiddleNameStartwith)
                validationMobile = try values.decodeIfPresent(String.self, forKey: .validationMobile)
                validationMotherBirthCountry = try values.decodeIfPresent(String.self, forKey: .validationMotherBirthCountry)
                validationMotherBirthDistrict = try values.decodeIfPresent(String.self, forKey: .validationMotherBirthDistrict)
                validationMotherBirthState = try values.decodeIfPresent(String.self, forKey: .validationMotherBirthState)
                validationMotherDob = try values.decodeIfPresent(String.self, forKey: .validationMotherDob)
                validationMotherDobNotValid = try values.decodeIfPresent(String.self, forKey: .validationMotherDobNotValid)
                validationMotherName = try values.decodeIfPresent(String.self, forKey: .validationMotherName)
                validationMotherTounge = try values.decodeIfPresent(String.self, forKey: .validationMotherTounge)
                validationMotherTounge1 = try values.decodeIfPresent(String.self, forKey: .validationMotherTounge1)
                validationName = try values.decodeIfPresent(String.self, forKey: .validationName)
                validationNameOfInstitution = try values.decodeIfPresent(String.self, forKey: .validationNameOfInstitution)
                validationNameOfInstitutionLength = try values.decodeIfPresent(String.self, forKey: .validationNameOfInstitutionLength)
                validationNameSpecialChar = try values.decodeIfPresent(String.self, forKey: .validationNameSpecialChar)
                validationNationality = try values.decodeIfPresent(String.self, forKey: .validationNationality)
                validationNewCensusHouseholdNo = try values.decodeIfPresent(String.self, forKey: .validationNewCensusHouseholdNo)
                validationNewCensusHouseholdNoZero = try values.decodeIfPresent(String.self, forKey: .validationNewCensusHouseholdNoZero)
                validationNewchhNoAlreadyExist = try values.decodeIfPresent(String.self, forKey: .validationNewchhNoAlreadyExist)
                validationOccupation = try values.decodeIfPresent(String.self, forKey: .validationOccupation)
                validationPanCard = try values.decodeIfPresent(String.self, forKey: .validationPanCard)
                validationPassport = try values.decodeIfPresent(String.self, forKey: .validationPassport)
                validationPermaneentAddress1 = try values.decodeIfPresent(String.self, forKey: .validationPermaneentAddress1)
                validationPermaneentAddress2 = try values.decodeIfPresent(String.self, forKey: .validationPermaneentAddress2)
                validationPermaneentCountry = try values.decodeIfPresent(String.self, forKey: .validationPermaneentCountry)
                validationPermaneentDistrict = try values.decodeIfPresent(String.self, forKey: .validationPermaneentDistrict)
                validationPermaneentPincode = try values.decodeIfPresent(String.self, forKey: .validationPermaneentPincode)
                validationPermaneentState = try values.decodeIfPresent(String.self, forKey: .validationPermaneentState)
                validationPermaneentTehsil = try values.decodeIfPresent(String.self, forKey: .validationPermaneentTehsil)
                validationPresentAddress1 = try values.decodeIfPresent(String.self, forKey: .validationPresentAddress1)
                validationPresentAddress2 = try values.decodeIfPresent(String.self, forKey: .validationPresentAddress2)
                validationPresentDistrict = try values.decodeIfPresent(String.self, forKey: .validationPresentDistrict)
                validationPresentPincode = try values.decodeIfPresent(String.self, forKey: .validationPresentPincode)
                validationPresentState = try values.decodeIfPresent(String.self, forKey: .validationPresentState)
                validationPresentSubDistrict = try values.decodeIfPresent(String.self, forKey: .validationPresentSubDistrict)
                validationRelationship = try values.decodeIfPresent(String.self, forKey: .validationRelationship)
                validationRespondentMobile = try values.decodeIfPresent(String.self, forKey: .validationRespondentMobile)
                validationRespondentName = try values.decodeIfPresent(String.self, forKey: .validationRespondentName)
                validationSpouseName = try values.decodeIfPresent(String.self, forKey: .validationSpouseName)
                validationSpouseNameBlank = try values.decodeIfPresent(String.self, forKey: .validationSpouseNameBlank)
                validationStayingAtPresentAddressYears = try values.decodeIfPresent(String.self, forKey: .validationStayingAtPresentAddressYears)
                validationStayingAtPresentAddressYearsCanNotBeMoreThanAge = try values.decodeIfPresent(String.self, forKey: .validationStayingAtPresentAddressYearsCanNotBeMoreThanAge)
                validationStayingAtPresentAddressYearsInvalid = try values.decodeIfPresent(String.self, forKey: .validationStayingAtPresentAddressYearsInvalid)
                validationStayingAtPresentAddressYearsNot = try values.decodeIfPresent(String.self, forKey: .validationStayingAtPresentAddressYearsNot)
                validationStayingAtPresentAddressYesNo = try values.decodeIfPresent(String.self, forKey: .validationStayingAtPresentAddressYesNo)
                validationVoterid = try values.decodeIfPresent(String.self, forKey: .validationVoterid)
                verifyOtp = try values.decodeIfPresent(String.self, forKey: .verifyOtp)
                verifyOtpLable = try values.decodeIfPresent(String.self, forKey: .verifyOtpLable)
                version = try values.decodeIfPresent(String.self, forKey: .version)
                viewEditNotUploadedMessage = try values.decodeIfPresent(String.self, forKey: .viewEditNotUploadedMessage)
                viewEditUploadedListMessage = try values.decodeIfPresent(String.self, forKey: .viewEditUploadedListMessage)
                voterId = try values.decodeIfPresent(String.self, forKey: .voterId)
                ward = try values.decodeIfPresent(String.self, forKey: .ward)
                wheaterStayingAtPresentAddresSinceBirth = try values.decodeIfPresent(String.self, forKey: .wheaterStayingAtPresentAddresSinceBirth)
                widowed = try values.decodeIfPresent(String.self, forKey: .widowed)
                wrongLoginType = try values.decodeIfPresent(String.self, forKey: .wrongLoginType)
                wrongPassword = try values.decodeIfPresent(String.self, forKey: .wrongPassword)
                yearsOfStaying = try values.decodeIfPresent(String.self, forKey: .yearsOfStaying)
                yes = try values.decodeIfPresent(String.self, forKey: .yes)
                yesToAddMoreMember = try values.decodeIfPresent(String.self, forKey: .yesToAddMoreMember)
                youHaveComplted10HhPleaseUpload = try values.decodeIfPresent(String.self, forKey: .youHaveComplted10HhPleaseUpload)
                youHaveComplted50MemberPleaseUpload = try values.decodeIfPresent(String.self, forKey: .youHaveComplted50MemberPleaseUpload)
                youWillLossData = try values.decodeIfPresent(String.self, forKey: .youWillLossData)
        }
*/
}


    struct ModelNameID : Codable {

            let id  = ""
            let name  = ""

            enum CodingKeys: String, CodingKey {
                    case id = "id"
                    case name = "name"
            }
        
            init(from decoder: Decoder) throws {
                    let values = try decoder.container(keyedBy: CodingKeys.self)
                    id = try values.decodeIfPresent(String.self, forKey: .id)
                    name = try values.decodeIfPresent(String.self, forKey: .name)
            }

    }

